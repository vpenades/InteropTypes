<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\\..\\Shared\\CodeGenUtils.t4" #>

namespace InteropTypes.Graphics.Bitmaps.Processing
{    

<# //-------------------------------------------------------------------------------------------------------------------

var interfaces = new List<string>();

var srcPixels =new string[] { "BGR24","RGB24","RGBA32","BGRA32","BGRP32" };
var dstPixels =new string[] { "BGR24","RGB24","RGBA32","BGRA32","BGRP32", "BGR96F", "RGB96F" };

var pixelPairs = dstPixels
                    .SelectMany( dstp => srcPixels.Select(srcp => (dstp,srcp) ) )
                    .Distinct()
                    .ToArray();

bool IsOpaque(string pixelFmt)
{
    if (pixelFmt == "BGR24") return true;
    if (pixelFmt == "RGB24") return true;
    return false;
}

foreach(var (dstPixel,srcPixel) in pixelPairs)
{
    interfaces.Add($"SpanBitmap.ITransfer<Pixel.{srcPixel}, Pixel.{dstPixel}>");    
}

//-----------------------------------------

    _writeStructBegin("BitmapTransform", interfaces.ToArray());    

    foreach(var (dstPixel,srcPixel) in pixelPairs)
    {   
        _writeDocInherit();
        WriteLine($"public bool TryTransfer(SpanBitmap<Pixel.{srcPixel}> source, SpanBitmap<Pixel.{dstPixel}> target)");
        _writeOpenBlock();            

            if (IsOpaque(srcPixel))
            {
                WriteLine("if (Opacity >= 1)");
                _writeOpenBlock();

                if (srcPixel == dstPixel)
                {
                    WriteLine("switch(UseBilinear)");
                    _writeOpenBlock();
                    WriteLine(" case true: _PixelsTransformImplementation.OpaquePixelsConvert(source, target, Transform, true); break;");                    
                    WriteLine(" case false: _PixelsTransformImplementation.OpaquePixelsDirect(source, target, Transform); break;");                
                    _writeCloseBlock();
                }
                else
                {
                    WriteLine("_PixelsTransformImplementation.OpaquePixelsConvert(source, target, Transform, UseBilinear);");
                }
                
                WriteLine("return true;");
                _writeCloseBlock();
            }

            WriteLine("_PixelsTransformImplementation.ComposePixels(source, target, Transform, UseBilinear, Opacity);");
            WriteLine("return true;");
        _writeCloseBlock();
    }

_writeEnd();

// --------------------------------------------------------------------------------------------------------------------- #>

}