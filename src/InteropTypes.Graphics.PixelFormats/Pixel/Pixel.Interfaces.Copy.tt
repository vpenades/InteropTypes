<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Runtime.CompilerServices;

namespace InteropBitmaps
{
    partial class Pixel    
    {
        interface ICopyConverterDelegateProvider<TSrc,TDst>
        {
            CopyConverterCallback<TSrc,TDst> GetCopyConverterDelegate();
        }

<# //-------------------------------------------------------------------------------------------------------------------

        // https://docs.microsoft.com/en-us/visualstudio/modeling/text-template-utility-methods?view=vs-2022

        var pixelFormatAllNames = new string[] {"Alpha8", "Luminance8", "Luminance16", "Luminance32F", "BGR565", "BGR24","RGB24", "BGRA5551", "BGRA4444", "BGRA32", "RGBA32", "ARGB32", "RGBP32","BGRP32", "RGB96F", "BGR96F", "BGRA128F", "RGBA128F", "RGBP128F" };
        var pixelFormatSrc8Names = new string[] { "Alpha8", "Luminance8", "BGR565","BGRA5551","BGRA4444","RGB24","BGR24","RGBA32","BGRA32","ARGB32", "BGRP32", "RGBP32" };        
        var pixelFormatSrcFNames = new string[] { "Luminance32F", "RGB96F","BGR96F","RGBA128F","BGRA128F", "RGBP128F" };

        var digits = new char[] { '0','1','2','3','4','5','6','7','8','9'};

        (string Channels, string Size) _getChannels(string format)
        {
            var idx = format.IndexOfAny(digits);
            var a = format.Substring(0,idx);
            var b = format.Substring(idx);
            return(a,b);            
        }        

        void _writeCopyArray(string pixelSrcName, string pixelDstName, string cvtFunc)
        {
            WriteLine("");

            var delegateName = $"CopyConverterCallback<{pixelSrcName},{pixelDstName}>";

            WriteLine($"{delegateName} ICopyConverterDelegateProvider<{pixelSrcName},{pixelDstName}>.GetCopyConverterDelegate() {{ return Copy; }}");            

            WriteLine("");
            
            WriteLine("/// <summary>");
            WriteLine("/// Copies all the values of <paramref name=\"src\"/> into <paramref name=\"dst\"/>.");
            WriteLine("/// </summary>");
            WriteLine("/// <param name=\"src\">The source buffer.</param>");
            WriteLine("/// <param name=\"dst\">The target buffer.</param>");
            WriteLine($"public static void Copy(ReadOnlySpan<{pixelSrcName}> src, Span<{pixelDstName}> dst)");                
            WriteLine("{"); PushIndent("    ");

            WriteLine("System.Diagnostics.Debug.Assert(src.Length == dst.Length);");
            WriteLine("System.Diagnostics.Debug.Assert(!src.AsBytes().Overlaps(dst.AsBytes()));");
            
            _writeCopyArrayFunc(pixelSrcName, pixelDstName, cvtFunc);

            PopIndent(); WriteLine("}");
        }

        void _writeCopyArrayFunc(string pixelSrcName, string pixelFmtName, string cvtFunc)
        {
            var (srcChan,srcSize) = _getChannels(pixelSrcName);
            var (dstChan,dstSize) = _getChannels(pixelFmtName);

            if (pixelFmtName == pixelSrcName)
            {
                WriteLine("var r = src.TryCopyTo(dst);");
                WriteLine("System.Diagnostics.Debug.Assert(r);");
                return;
            }
            
            if (srcSize == dstSize)
            {
                var useByteCopy = false;
                if (srcChan == "Alpha" && dstChan == "Luminance") useByteCopy = true;
                if (srcChan == "Luminance" && dstChan == "Alpha") useByteCopy = true;

                if (useByteCopy)
                {
                    WriteLine("var r = src.AsBytes().TryCopyTo(dst.AsBytes());");
                    WriteLine("System.Diagnostics.Debug.Assert(r);");
                    return;
                }
            }

            if ( srcChan == dstChan )
            {
                var useByteToUnit = false;
                if (srcSize == "8" && dstSize == "32F") useByteToUnit = true;
                if (srcSize == "24" && dstSize == "96F") useByteToUnit = true;
                if (srcSize == "32" && dstSize == "128F") useByteToUnit = true;

                if (useByteToUnit)
                {
                    WriteLine("Vector4Streaming.BytesToUnits(src.AsBytes(), dst.AsSingles());");
                    return;
                }
            }

            if ( dstSize == "24" || dstSize == "32" )
            {
                var useByteTransfer = false;

                if (pixelSrcName == "Alpha8") useByteTransfer = true;
                if (pixelSrcName == "BGR565") useByteTransfer = true;
                if (pixelSrcName == "BGRA5551") useByteTransfer = true;
                if (pixelSrcName == "BGRA4444") useByteTransfer = true;
                if (pixelSrcName == "RGB24") useByteTransfer = true;
                if (pixelSrcName == "BGR24") useByteTransfer = true;                
                if (pixelSrcName == "RGBA32") useByteTransfer = true;
                if (pixelSrcName == "BGRA32") useByteTransfer = true;
                if (pixelSrcName == "ARGB32") useByteTransfer = true;                

                // prevent premultiplied formats using this transfer
                if (srcChan.Contains("P")) useByteTransfer = false;
                if (dstChan.Contains("P")) useByteTransfer = false;

                if (useByteTransfer)
                {

                    WriteLine(string.Empty);
                    WriteLine("// Get pointer references.");
                    WriteLine($"ref {pixelSrcName} sPtr = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(src);");
                    WriteLine($"ref Byte dPtr = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(dst.AsBytes());");
                    WriteLine("int dLen = dst.Length;");

                    WriteLine(string.Empty);
                    WriteLine("// Old school pointer copy loop.");
                    WriteLine("while(dLen > 0)");
                    WriteLine("{"); PushIndent("    ");
                    WriteLine("--dLen;");

                    WriteLine("// per channel copy.");
                    for(int i=0; i < dstChan.Length; ++i)
                    {
                        var c = dstChan[i];

                        if (srcChan.Contains(c)) WriteLine($"dPtr = (Byte)sPtr.{c};");
                        else
                        {
                            if (c == 'A') WriteLine($"dPtr = 255;");
                            else WriteLine($"dPtr = 0;");
                        }

                        WriteLine("dPtr = ref Unsafe.Add(ref dPtr, 1);");
                    }
                
                    WriteLine(string.Empty);
                    WriteLine("sPtr = ref Unsafe.Add(ref sPtr, 1);");
                    
                    PopIndent(); WriteLine("}");
                    return;
                }            
            }            

            cvtFunc = cvtFunc.Replace("*","sPtr");

            WriteLine(string.Empty);
            WriteLine("// Get pointer references.");
            WriteLine($"ref {pixelSrcName} sPtr = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(src);");
            WriteLine($"ref {pixelFmtName} dPtr = ref System.Runtime.InteropServices.MemoryMarshal.GetReference(dst);");
            WriteLine("int dLen = dst.Length;");

            WriteLine(string.Empty);
            WriteLine("// Old school pointer copy loop.");
            WriteLine("while(dLen > 0)");
            WriteLine("{"); PushIndent("    ");
            WriteLine("--dLen;");
            WriteLine($"dPtr = new {pixelFmtName}({cvtFunc});");
            WriteLine("sPtr = ref Unsafe.Add(ref sPtr, 1);");
            WriteLine("dPtr = ref Unsafe.Add(ref dPtr, 1);");
            PopIndent(); WriteLine("}");
            
            
            /*
            cvtFunc = cvtFunc.Replace("*","src[0]");
            WriteLine("while(dst.Length > 0)");
            WriteLine("{"); PushIndent("    ");
            WriteLine($"dst[0] = new {pixelFmtName}({cvtFunc});");
            WriteLine($"src = src.Slice(1);");
            WriteLine($"dst = dst.Slice(1);");
            PopIndent(); WriteLine("}");      
            */
        }

        foreach(var pixelFmtName in pixelFormatAllNames)
        {
            ClearIndent();
            PushIndent("    ");
            PushIndent("    ");            

            WriteLine($"partial struct {pixelFmtName}");            

            PushIndent("    ");

            var allFormats = pixelFormatSrc8Names.Concat(pixelFormatSrcFNames).ToArray();

            for(int i=0; i < allFormats.Length; ++i)
            {
                var dst = allFormats[i];                

                var tmp = (i == 0 ? ": " : ", ") + $"ICopyConverterDelegateProvider<{pixelFmtName}, {dst}>";
                WriteLine(tmp);
            }            

            PopIndent();

            WriteLine("{");PushIndent("    ");

            foreach(var pixelDstName in pixelFormatSrc8Names)            
            {
                var cvtFunc = "new BGRA32(*)";
                if (pixelFmtName == "BGRA32") cvtFunc = "*";
                if (pixelDstName == "BGRA32") cvtFunc = "*";                

                _writeCopyArray(pixelFmtName,pixelDstName,cvtFunc);
            }

            foreach(var pixelDstName in pixelFormatSrcFNames)            
            {
                var cvtFunc = "new RGBA128F(*)";
                if (pixelFmtName == "RGBA128F") cvtFunc = "*";
                if (pixelDstName == "RGBA128F") cvtFunc = "*";
                if (pixelDstName == "RGBP128F") cvtFunc = "*";                

                _writeCopyArray(pixelFmtName,pixelDstName,cvtFunc);
            }

            PopIndent(); WriteLine("}");
        }

        ClearIndent();

// ---------------------------------------------------------------------------------------------------------------------------- #>

    }
}
