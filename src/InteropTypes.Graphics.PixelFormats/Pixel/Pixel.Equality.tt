<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\\CodeGenUtils.t4" #>
<#@ include file="Pixel.Constants.t4" #>


using System;

namespace InteropBitmaps
{
    partial class Pixel    
    {
<#

        foreach(var pixelFmtName in PixelFormatsAllNames)
        {
            ClearIndent();
            PushIndent("    ");
            PushIndent("    ");            

            _writeStructBegin(pixelFmtName, $"IEquatable<{pixelFmtName}>");

            _writeDocInherit();
            WriteLine($"public static bool operator ==(in {pixelFmtName} a,in {pixelFmtName} b) {{ return a.Equals(b); }}");

            _writeDocInherit();
            WriteLine($"public static bool operator !=(in {pixelFmtName} a,in {pixelFmtName} b) {{ return !a.Equals(b); }}");

            _writeDocInherit();
            WriteLine($"public override bool Equals(Object obj) {{ return obj is {pixelFmtName} other && Equals(other); }}");

            _writeEquals(pixelFmtName);            

            _writeHashCode(pixelFmtName);

            _writeEnd();
        }

        void _writeEquals(string pixelFmt)
        {
            _writeDocInherit();
            WriteLine($"public bool Equals({pixelFmt} other)");
            _writeOpenBlock();

            var (ccc,s) = GetPixelFormatChannels(pixelFmt);
            if (ccc == "Alpha") ccc="A";
            if (ccc == "Luminance") ccc="L";

            if (ccc.Length == 1) WriteLine($"return this.{ccc} == other.{ccc};");
            else
            {
                var isPremul = ccc.Contains('P');
            
                if (ccc.Length > 1 && ccc.Contains("A")) WriteLine("if (this.A == 0 && other.A == 0) return true;");

                if (pixelFmt != "BGR24" && pixelFmt != "RGB24") { WriteLine($"return this.{ccc} == other.{ccc};"); ccc = string.Empty; }
                
                foreach(var c in ccc)
                {
                    var cc = c.ToString();
                    cc = cc == "P"
                        ? "A"
                        : (isPremul? "Pre" + cc : cc);

                    WriteLine($"if (this.{cc} != other.{cc}) return false;");
                }                

                if (ccc.Length > 0) WriteLine("return true;");
            }
                                  

            _writeCloseBlock();
        }

        void _writeHashCode(string pixelFmt)
        {
            _writeDocInherit();
            WriteLine($"public override int GetHashCode()");
            _writeOpenBlock();

            var (ccc,size) = GetPixelFormatChannels(pixelFmt);
            if (ccc == "Alpha") ccc="A";
            if (ccc == "Luminance") ccc="L";

            if (ccc.Length == 1) WriteLine($"return this.{ccc}.GetHashCode();");
            else
            {
                var isPremul = ccc.Contains('P');
            
                if (ccc.Length > 1 && ccc.Contains("A")) WriteLine("if (this.A == 0) return 0;");

                if (pixelFmt != "BGR24" && pixelFmt != "RGB24") { WriteLine($"return this.{ccc}.GetHashCode();"); ccc = string.Empty; }

                if (ccc.Length > 0) WriteLine("int h = 0;");
                
                foreach(var c in ccc)
                {
                    var cc = c.ToString();
                    cc = cc == "P"
                        ? "A"
                        : (isPremul? "Pre" + cc : cc);

                    if (size.EndsWith("F")) WriteLine($"h ^= this.{cc}.GetHashCode();");
                    else WriteLine($"h ^= this.{cc}; h <<= 8;");
                }                

                if (ccc.Length > 0) WriteLine("return h;");
            }
                                  

            _writeCloseBlock();
        }

        ClearIndent();
#>
    }
}

