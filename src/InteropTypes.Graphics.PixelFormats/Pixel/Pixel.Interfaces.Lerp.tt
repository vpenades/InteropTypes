<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace InteropBitmaps
{

    partial class Pixel    
    {
        public delegate void QuantizedSpanLerpCallback<TSrc,TDst>(ReadOnlySpan<TSrc>left ,ReadOnlySpan<TSrc> right, int amount, Span<TDst> dst);

        interface ISpanLerpDelegateProvider<TSrc,TDst>
        {
            QuantizedSpanLerpCallback<TSrc,TDst> GetQuantizedSpanLerpDelegate();
        }

<# //-------------------------------------------------------------------------------------------------------------------

        void _writeOpenBlock() { WriteLine("{"); PushIndent("    "); }

        void _writeCloseBlock() { PopIndent(); WriteLine("}"); }

        void _writeComment(string comment) { WriteLine(""); WriteLine($"// {comment}"); }

        // https://docs.microsoft.com/en-us/visualstudio/modeling/text-template-utility-methods?view=vs-2022

         

        string currentPixelFormatName;

        void _writeClassBegin(string fmt, params string [] interfaces)
        {
            currentPixelFormatName = fmt;

            ClearIndent();
            PushIndent("    ");
            PushIndent("    ");

            WriteLine($"partial struct {fmt}");

            PushIndent("    ");
            for(int i=0; i < interfaces.Length; ++i)
            {
                var sep = i==0 ? ":" : ",";
                WriteLine($"{sep} {interfaces[i]}");
            }
            PopIndent();

            _writeOpenBlock();
        }

        void _writeLerpArrayFloatAmount()
        {
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static void Lerp(ReadOnlySpan<{currentPixelFormatName}> left, ReadOnlySpan<{currentPixelFormatName}> right, float amount, Span<{currentPixelFormatName}> dst)");
            _writeOpenBlock();
            WriteLine("Lerp(left,right,(int)(amount * 16384f),dst);");
            _writeCloseBlock();
        }

        void _writeLerpArray(Action body, string amountType = "int")
        {
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static void Lerp(ReadOnlySpan<{currentPixelFormatName}> left, ReadOnlySpan<{currentPixelFormatName}> right, {amountType} amount, Span<{currentPixelFormatName}> dst)");
            _writeOpenBlock();
            body();
            _writeCloseBlock();
        }

        void _writeLerpArrayLoop()
        {
            WriteLine("");
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static void Lerp(ReadOnlySpan<{currentPixelFormatName}> left, ReadOnlySpan<{currentPixelFormatName}> right, int amount, Span<{currentPixelFormatName}> dst)");
            _writeOpenBlock();
            WriteLine("ref var lPtr = ref MemoryMarshal.GetReference(left);");
            WriteLine("ref var rPtr = ref MemoryMarshal.GetReference(right);");
            WriteLine("ref var dPtr = ref MemoryMarshal.GetReference(dst);");
            WriteLine("var len = dst.Length;");

            _writeComment("old school loop");
            WriteLine("while(len-- > 0)");
            _writeOpenBlock();
            WriteLine("dPtr = Lerp(lPtr,rPtr,amount);");
            WriteLine("dPtr = Unsafe.Add(ref dPtr,1);");
            WriteLine("lPtr = Unsafe.Add(ref lPtr,1);");
            WriteLine("rPtr = Unsafe.Add(ref rPtr,1);");
            _writeCloseBlock();

            _writeCloseBlock();
        }

        void _writeByteLerpArray() { WriteLine("Vector4Streaming.Lerp(left.AsBytes(), right.AsBytes(), amount, dst.AsBytes());"); }
        void _writeSingleLerpArray() { WriteLine("Vector4Streaming.Lerp(left.AsSingles(), right.AsSingles(), amount, dst.AsSingles());"); }

        void _writeAlphaQuantizedLerp()
        {
            var fmt = currentPixelFormatName;
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static {fmt} Lerp({fmt} p00, {fmt} p01, int rx)");

            _writeOpenBlock();
            _writeComment("calculate quantized weights");
            WriteLine("var lx = 16384 - rx;");                       

            WriteLine("System.Diagnostics.Debug.Assert((lx + rx) == 16384);");

            _writeComment("calculate final alpha");
            WriteLine("int a = (p00.A * lx + p01.A * rx) / 16384;");

            WriteLine("if (a == 0) return default;");

            _writeComment("calculate premultiplied RGB");
            WriteLine("lx *= p00.A;");
            WriteLine("rx *= p01.A;");        

            WriteLine("int r = (p00.R * lx + p01.R * rx) / 16384;");
            WriteLine("int g = (p00.G * lx + p01.G * rx) / 16384;");
            WriteLine("int b = (p00.B * lx + p01.B * rx) / 16384;");

            _writeComment("unpremultiply RGB");            
            WriteLine($"return new {fmt}(r / a, g / a, b / a, a);");
            _writeCloseBlock();
        }

        void _writeQuantizedLerp(params string[] channels)
        {
            var fmt = currentPixelFormatName;
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static {fmt} Lerp({fmt} left, {fmt} right, int rx)");

            _writeOpenBlock();
            _writeComment("calculate quantized weights");
            WriteLine("var lx = 16384 - rx;");                       

            WriteLine("System.Diagnostics.Debug.Assert((lx + rx) == 16384);");

            foreach(var c in channels)
            {
                WriteLine($"var {c} = (left.{c} * lx + right.{c} * rx) / 16384;");
            }

            var ccc = String.Join(", ", channels);

            WriteLine($"return new {fmt}({ccc});");
            
            _writeCloseBlock();
        }

        void _writeQuantizedLerpGeneric(params string[] channels)
        {
            var fmt = currentPixelFormatName;
            WriteLine("[MethodImpl(MethodImplOptions.AggressiveInlining)]");
            WriteLine($"public static TDst Lerp<TDst>({fmt} left, {fmt} right, int rx)");
            WriteLine($"    where TDst: unmanaged, IPixelFactory<BGRA32, TDst>");

            _writeOpenBlock();
            _writeComment("calculate quantized weights");
            WriteLine("var lx = 16384 - rx;");                       

            WriteLine("System.Diagnostics.Debug.Assert((lx + rx) == 16384);");

            foreach(var c in channels)
            {
                WriteLine($"var {c} = (left.{c} * lx + right.{c} * rx) / 16384;");
            }

            var ccc = String.Join(", ", channels);

            WriteLine($"return default(TDst).From( new BGRA32({ccc}));");
            
            _writeCloseBlock();
        }

        void _writeSpanLerpInterfaceMethod(string fmt, string dst)
        {
         
            WriteLine($"QuantizedSpanLerpCallback<{fmt},{dst}> ISpanLerpDelegateProvider<{fmt},{dst}>.GetQuantizedSpanLerpDelegate()");
            _writeOpenBlock();
            WriteLine("return Lerp;");
            _writeCloseBlock();
        }


        _writeClassBegin("Alpha8", "ISpanLerpDelegateProvider<Alpha8,Alpha8>");
        _writeSpanLerpInterfaceMethod("Alpha8","Alpha8");
        _writeQuantizedLerp("A");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("Luminance8", "ISpanLerpDelegateProvider<Luminance8,Luminance8>");
        _writeSpanLerpInterfaceMethod("Luminance8","Luminance8");
        _writeQuantizedLerp("L");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("BGR24", "ISpanLerpDelegateProvider<BGR24,BGR24>");
        _writeSpanLerpInterfaceMethod("BGR24","BGR24");
        _writeQuantizedLerp("R","G","B");
        _writeQuantizedLerpGeneric("R","G","B");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("RGB24", "ISpanLerpDelegateProvider<RGB24,RGB24>");
        _writeSpanLerpInterfaceMethod("RGB24","RGB24");
        _writeQuantizedLerp("R","G","B");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("BGRA5551");
        _writeAlphaQuantizedLerp();
        _writeLerpArrayFloatAmount();
        _writeLerpArrayLoop();
        _writeCloseBlock();

        _writeClassBegin("BGRA4444");
        _writeAlphaQuantizedLerp();
        _writeLerpArrayFloatAmount();
        _writeLerpArrayLoop();
        _writeCloseBlock();

        _writeClassBegin("RGBA32", "ISpanLerpDelegateProvider<RGBA32,RGBA32>");
        _writeSpanLerpInterfaceMethod("RGBA32","RGBA32");
        _writeAlphaQuantizedLerp();
        _writeLerpArrayFloatAmount();
        _writeLerpArrayLoop();
        _writeCloseBlock();

        _writeClassBegin("BGRA32");
        _writeAlphaQuantizedLerp();
        _writeLerpArrayFloatAmount();
        _writeLerpArrayLoop();
        _writeCloseBlock();

        _writeClassBegin("ARGB32");
        _writeAlphaQuantizedLerp();
        _writeLerpArrayFloatAmount();
        _writeLerpArrayLoop();
        _writeCloseBlock();

        _writeClassBegin("RGBP32");
        _writeQuantizedLerp("PreR","PreG","PreB","A");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("BGRP32");
        _writeQuantizedLerp("PreR","PreG","PreB","A");
        _writeLerpArrayFloatAmount();
        _writeLerpArray(_writeByteLerpArray);
        _writeCloseBlock();

        _writeClassBegin("RGB96F");
        _writeLerpArray(_writeSingleLerpArray,"float");
        _writeCloseBlock();

        _writeClassBegin("BGR96F");
        _writeLerpArray(_writeSingleLerpArray,"float");
        _writeCloseBlock();

        _writeClassBegin("RGBP128F");
        _writeLerpArray(_writeSingleLerpArray,"float");
        _writeCloseBlock();

        ClearIndent();

// ---------------------------------------------------------------------------------------------------------------------------- #>

    }
}
