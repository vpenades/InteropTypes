<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;

namespace InteropBitmaps
{
    partial class Pixel    
    {
        public interface IPixelConvertible<TPixel>
        {
            TPixel ToPixel();
        }

<#
        // https://docs.microsoft.com/en-us/visualstudio/modeling/text-template-utility-methods?view=vs-2022

        var pixelFormatAllNames = new string[] {"Alpha8", "Luminance8", "Luminance16", "Luminance32F", "BGR565", "BGR24","RGB24", "BGRA5551", "BGRA4444", "BGRA32", "RGBA32", "ARGB32", "RGBP32","BGRP32", "RGB96F", "BGR96F", "BGRA128F", "RGBA128F", "RGBP128F" };
        var pixelFormatDst8Names = new string[] { "Alpha8", "Luminance8", "BGR565","BGRA5551","BGRA4444","RGB24","BGR24","RGBA32","BGRA32","ARGB32", "BGRP32", "RGBP32" };
        var pixelFormatDstFNames = new string[] { "Luminance32F", "RGB96F","BGR96F","RGBA128F","BGRA128F", "RGBP128F" };

        void _writeToPixel(string pixelSrcName, string pixelDstName, string cvtFunc = "this")
        {
            if (pixelSrcName == "Luminance8" && pixelDstName == "Alpha8") cvtFunc = "this.L";
            if (pixelSrcName == "Alpha8" && pixelDstName == "Luminance8") cvtFunc = "this.A";

            var eval = pixelSrcName == pixelDstName
                    ? "return this;"
                    : $"return new {pixelDstName}({cvtFunc});";            

            eval = "{ " + eval + " }";

            WriteLine("/// <inheritdoc />");
            WriteLine($"{pixelDstName} IPixelConvertible<{pixelDstName}>.ToPixel() {eval}");
        }

        foreach(var pixelFmtName in pixelFormatAllNames)
        {
            ClearIndent();
            PushIndent("    ");
            PushIndent("    ");            

            WriteLine($"partial struct {pixelFmtName}");

            PushIndent("    ");

            var allFormats = pixelFormatDst8Names.Concat(pixelFormatDstFNames).ToArray();

            for(int i=0; i < allFormats.Length; ++i)
            {
                var dst = allFormats[i];
                var tmp = (i == 0 ? ": " : ", ") + $"IPixelConvertible<{dst}>";                
                WriteLine(tmp);                
            }

            PopIndent();

            WriteLine("{");PushIndent("    ");            

            foreach(var pixelDstName in pixelFormatDst8Names)                        
            {
                var cvtFunc = "new BGRA32(this)";
                if (pixelFmtName == "BGRA32") cvtFunc = "this";
                if (pixelDstName == "BGRA32") cvtFunc = "this";
                if (pixelDstName == "RGBP128F") cvtFunc = "this";

                _writeToPixel(pixelFmtName, pixelDstName, cvtFunc);
            }

            foreach(var pixelDstName in pixelFormatDstFNames)                        
            {
                var cvtFunc = "new RGBA128F(this)";
                if (pixelFmtName == "RGBA128F") cvtFunc = "this";
                if (pixelDstName == "RGBA128F") cvtFunc = "this";
                if (pixelDstName == "RGBP128F") cvtFunc = "this";

                _writeToPixel(pixelFmtName, pixelDstName, cvtFunc);
            }

            PopIndent(); WriteLine("}");
        }

        ClearIndent();
#>
    }
}
