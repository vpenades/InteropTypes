// GENERATED CODE: using CodeGenUtils.t4
<#

void _writeOpenBlock() { WriteLine("{"); PushIndent("    "); }

void _writeCloseBlock() { PopIndent(); WriteLine("}"); }

void _writeComment(string comment) { WriteLine(""); WriteLine($"// {comment}"); }

void _writeFastestMethodAttribute() { WriteLine("[MethodImpl(_PrivateConstants.Fastest)]"); }

// https://docs.microsoft.com/en-us/visualstudio/modeling/text-template-utility-methods?view=vs-2022

void _writeDocInherit() 
{
    WriteLine("");
    WriteLine("/// <inheritdoc/>");
}

void _writeDocSummary(params string[] summary) 
{
    WriteLine("");
    WriteLine("/// <summary>");
    foreach(var l in summary) WriteLine($"/// {l}");
    WriteLine("/// </summary>");
}

void _writeExpanded(string mainText, params string[] replacements)
{
    foreach(var r in replacements)
    {
        WriteLine(mainText.Replace("@",r));
    }
}

Stack<string> __CurrentClassName = new Stack<string>();

string GetCurrentClassName() { return __CurrentClassName.Peek(); }

void _writeStructBegin(string name, params string [] interfaces)
{
    __CurrentClassName.Push(name);

    ClearIndent();
    PushIndent("    ");
    PushIndent("    ");

    // WriteLine("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.TextTemplating\", \"17.0.0.0\")]");
    if (interfaces.Length == 1) WriteLine($"partial struct {name} : {interfaces[0]}");
    else
    {
        WriteLine($"partial struct {name}");

        PushIndent("    ");
        for(int i=0; i < interfaces.Length; ++i)
        {
            var sep = i==0 ? ":" : ",";
            WriteLine($"{sep} {interfaces[i]}");
        }
        PopIndent();
    }

    _writeOpenBlock();
}

void _writeInternalInterfaceBegin(string name, params string [] interfaces)
{
    __CurrentClassName.Push(name);

    ClearIndent();
    PushIndent("    ");
    PushIndent("    ");

    // WriteLine("[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.TextTemplating\", \"17.0.0.0\")]");
    if (interfaces.Length == 1) WriteLine($"internal interface {name} : {interfaces[0]}");
    else
    {
        WriteLine($"internal interface {name}");

        PushIndent("    ");
        for(int i=0; i < interfaces.Length; ++i)
        {
            var sep = i==0 ? ":" : ",";
            WriteLine($"{sep} {interfaces[i]}");
        }
        PopIndent();
    }

    _writeOpenBlock();
}

void _writeEnd()
{
    __CurrentClassName.Pop();
    _writeCloseBlock();
}

void _WriteSkipInitVar(string type, string varName) // _WriteSkipInitVar
{
    WriteLine("#if NET6_0_OR_GREATER");
    WriteLine($"Unsafe.SkipInit<{type}>(out var {varName});");
    WriteLine("#else");
    WriteLine($"var {varName} = default({type});");
    WriteLine("#endif");    
}

void _WriteSkipInitOut(string type, string varName)
{
    WriteLine("#if NET6_0_OR_GREATER");
    WriteLine($"Unsafe.SkipInit<{type}>(out {varName});");
    WriteLine("#else");
    WriteLine($"{varName} = default({type});");
    WriteLine("#endif");    
}

#>