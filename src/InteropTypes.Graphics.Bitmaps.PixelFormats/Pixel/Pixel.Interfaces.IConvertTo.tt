<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\\..\\Shared\\CodeGenUtils.t4" #>
<#@ include file="Pixel.Constants.t4" #>

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace InteropTypes.Graphics.Bitmaps
{
    partial class Pixel    
    {           

<# //-------------------------------------------------------------------------------------------------------------------    

    foreach(var fmt in PixelFormatsAllNames)
    {
        _writeStructBegin(fmt, "IConvertTo");

        _writeDocInherit();
        _writeFastestMethodAttribute();
        WriteLine($"public void Set<TPixel>(in TPixel pixel) where TPixel: unmanaged");
        _writeOpenBlock();
        WriteLine("switch(pixel)");
        _writeOpenBlock();
        foreach(var other in PixelFormatsAllNames)
        {
            WriteLine($"case {other} typedPixel: SetValue(typedPixel); return;");            
        }
        WriteLine("default: throw new NotImplementedException($\"Cannot convert to {typeof(TPixel).Name}\");");
        _writeCloseBlock();
        _writeCloseBlock();

        _writeDocInherit();
        _writeFastestMethodAttribute();
        WriteLine($"public void SetFrom<TPixel>(ref TPixel pixel) where TPixel: unmanaged");
        _writeOpenBlock();
        WriteLine("switch(pixel)");
        _writeOpenBlock();
        foreach(var other in PixelFormatsAllNames)
        {
            WriteLine($"case {other} typedPixel: SetValue(typedPixel); return;");
        }
        WriteLine("default: throw new NotImplementedException($\"Cannot convert to {typeof(TPixel).Name}\");");
        _writeCloseBlock();
        _writeCloseBlock();

        _writeDocInherit();
        _writeFastestMethodAttribute();
        WriteLine($"public readonly TPixel To<TPixel>() where TPixel: unmanaged");
        _writeOpenBlock();
        _WriteSkipInitVar("TPixel","result");
        foreach(var other in PixelFormatsAllNames)
        {
            WriteLine($"if (typeof(TPixel) == typeof({other})) {{ Unsafe.As<TPixel, {other}>(ref result).SetValue(this); return result; }}");            
        }
        WriteLine("throw new NotImplementedException($\"Cannot convert to {typeof(TPixel).Name}\");");
        _writeCloseBlock();

        _writeDocInherit();
        _writeFastestMethodAttribute();
        WriteLine($"public readonly void CopyTo<TPixel>(ref TPixel target) where TPixel: unmanaged");
        _writeOpenBlock();
        foreach(var other in PixelFormatsAllNames)
        {
            WriteLine($"if (typeof(TPixel) == typeof({other})) {{ Unsafe.As<TPixel, {other}>(ref target).SetValue(this); return; }}");            
        }
        WriteLine("throw new NotImplementedException($\"Cannot convert to {typeof(TPixel).Name}\");");
        _writeCloseBlock();

        _writeEnd();
    }

    ClearIndent();

// ---------------------------------------------------------------------------------------------------------------------------- #>

    }
}
