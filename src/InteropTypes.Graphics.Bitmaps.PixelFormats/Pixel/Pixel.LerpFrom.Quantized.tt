<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="..\\..\\Shared\\CodeGenUtils.t4" #>

using System;

namespace InteropTypes.Graphics.Bitmaps
{
    partial class Pixel
    {

<# //-------------------------------------------------------------------------------------------------------------------

var interfaces = new List<string>();

var srcPixels =new string[] { "BGR24","RGB24","RGBA32","BGRA32","BGRP32","RGBP32" };

bool IsOpaque(string pixelFmt)
{
    if (pixelFmt == "BGR24") return true;
    if (pixelFmt == "RGB24") return true;
    return false;
}

bool IsPremul(string pixelFmt)
{
    if (pixelFmt == "BGRP32") return true;
    if (pixelFmt == "RGBP32") return true;
    return false;
}

IEnumerable<string> GetPixelComponents(string pixelFmt)
{
    switch(pixelFmt)
    {
        case "RGB24": return new string[] {"R","G","B"};
        case "BGR24": return new string[] {"B","G","R"};
        case "BGRP32": return new string[] {"PreB","PreG","PreR","A"};
        case "RGBP32": return new string[] {"PreR","PreG","PreB","A"};
        default: return null;
    }

    return null;
}

void _WritePixelTypeStruct(string srcPixel)
{
    _writeStructBegin($"{srcPixel}", $"ISetFromQuantizedLerp<{srcPixel}>");    

    WriteLine("const int _QLERPSHIFT = 11;");    
    WriteLine("const int _QLERPVALUE = 1 << _QLERPSHIFT;");
    WriteLine("const int _QLERPSHIFTSQUARED = _QLERPSHIFT*2;");
    WriteLine("const int _QLERPVALUESQUARED = 1 << _QLERPSHIFTSQUARED;");

    _writeDocInherit();
    WriteLine("public int QuantizedLerpShift => _QLERPSHIFT;");
}

void _WriteOpaqueQ2(string srcPixel)
{
    _writeDocInherit();
    WriteLine($"public void SetFromLerp({srcPixel} left, {srcPixel} right, uint rx)");
    _writeOpenBlock();
        WriteLine("var lx = _QLERPVALUE - rx;");
        foreach(var cmp in GetPixelComponents(srcPixel))
        {
            WriteLine($"{cmp} = (Byte)((left.{cmp} * lx + right.{cmp} * rx) >> _QLERPSHIFT);");
        }                
    _writeCloseBlock();
}

void _WriteOpaqueQ4(string srcPixel)
{
    _writeDocInherit();
    WriteLine($"public void SetFromLerp({srcPixel} tl, {srcPixel} tr, {srcPixel} bl, {srcPixel} br, uint rx, uint by)");
    _writeOpenBlock();
        WriteLine("var lx = _QLERPVALUE - rx;");
        WriteLine("var ty = _QLERPVALUE - by;");
        WriteLine("var wtl = lx * ty; // top-left weight");
        WriteLine("var wtr = rx * ty; // top-right weight");
        WriteLine("var wbl = lx * by; // bottom-left weight");
        WriteLine("var wbr = rx * by; // bottom-right weight");
        WriteLine("System.Diagnostics.Debug.Assert(wtl + wtr + wbl + wbr == _QLERPVALUESQUARED);");

        foreach(var cmp in GetPixelComponents(srcPixel))
        {
            WriteLine($"{cmp} = (Byte)((tl.{cmp} * wtl + tr.{cmp} * wtr + bl.{cmp} * wbl + br.{cmp} * wbr) >> _QLERPSHIFTSQUARED);");
        }
    _writeCloseBlock();
}

void _WriteAlphaQ2(string pixelFmt, bool isPremulOutput)
{
    _writeDocInherit();
    WriteLine($"public void SetFromLerp({pixelFmt} l, {pixelFmt} r, uint rx)");
    _writeOpenBlock();
    _writeCloseBlock();
}

void _WriteAlphaQ4(string pixelFmt, bool isPremulOutput)
{
    _writeDocInherit();
    WriteLine($"public void SetFromLerp({pixelFmt} tl, {pixelFmt} tr, {pixelFmt} bl, {pixelFmt} br, uint rx, uint by)");
    _writeOpenBlock();

    _writeComment("calculate quantized weights");
    WriteLine("var lx = _QLERPVALUE - rx;");
    WriteLine("var ty = _QLERPVALUE - by;");
    WriteLine("var wtl = lx * ty;");
    WriteLine("var wtr = rx * ty;");
    WriteLine("var wbl = lx * by;");
    WriteLine("var wbr = rx * by;");
    WriteLine("System.Diagnostics.Debug.Assert(wtl + wtr + wbl + wbr == _QLERPVALUESQUARED);");

    _writeComment("calculate final alpha");
    WriteLine("var a = (tl.A * wtl + tr.A * wtr + bl.A * wbl + br.A * wbr) >> _QLERPSHIFTSQUARED;");
    WriteLine("if (a == 0) { this = default; return; }");

    _writeComment("calculate premultiplied weights");
    WriteLine("wtl *= tl.A;");
    WriteLine("wtl >>= _QLERPSHIFT;");
    WriteLine("wtr *= tr.A;");
    WriteLine("wtr >>= _QLERPSHIFT;");
    WriteLine("wbl *= bl.A;");
    WriteLine("wbl >>= _QLERPSHIFT;");
    WriteLine("wbr *= br.A;");
    WriteLine("wbr >>= _QLERPSHIFT;");

    _writeComment("calculate premultiplied RGB");
    WriteLine("var r = (tl.R * wtl + tr.R * wtr + bl.R * wbl + br.R * wbr) >> _QLERPSHIFT;");
    WriteLine("var g = (tl.G * wtl + tr.G * wtr + bl.G * wbl + br.G * wbr) >> _QLERPSHIFT;");
    WriteLine("var b = (tl.B * wtl + tr.B * wtr + bl.B * wbl + br.B * wbr) >> _QLERPSHIFT;");

    if (isPremulOutput)
    {
        _writeComment("set values");
        WriteLine("PreR = (byte)r;");
        WriteLine("PreG = (byte)g;");
        WriteLine("PreB = (byte)b;");        
        WriteLine("A = (byte)a;");
    }
    else
    {
        _writeComment("unpremultiply RGB");
        WriteLine("R = (byte)(r / a);");
        WriteLine("G = (byte)(g / a);");
        WriteLine("B = (byte)(b / a);");        
        WriteLine("A = (byte)a;");
    }

    _writeCloseBlock();
}


                

//-----------------------------------------

_WritePixelTypeStruct("RGB24"); 
_WriteOpaqueQ2("RGB24");
_WriteOpaqueQ4("RGB24");
_writeEnd();

_WritePixelTypeStruct("BGR24"); 
_WriteOpaqueQ2("BGR24");
_WriteOpaqueQ4("BGR24");
_writeEnd();

_WritePixelTypeStruct("RGBP32"); 
_WriteOpaqueQ2("RGBP32");
_WriteOpaqueQ4("RGBP32");
_writeEnd();

_WritePixelTypeStruct("BGRP32"); 
_WriteOpaqueQ2("BGRP32");
_WriteOpaqueQ4("BGRP32");
_WriteAlphaQ2("RGBA32",true);
_WriteAlphaQ4("RGBA32",true);
_WriteAlphaQ2("BGRA32",true);
_WriteAlphaQ4("BGRA32",true);
_WriteAlphaQ2("ARGB32",true);
_WriteAlphaQ4("ARGB32",true);
_writeEnd();

_WritePixelTypeStruct("RGBA32"); 
_WriteAlphaQ2("RGBA32",false);
_WriteAlphaQ4("RGBA32",false);
_writeEnd();

_WritePixelTypeStruct("BGRA32"); 
_WriteAlphaQ2("BGRA32",false);
_WriteAlphaQ4("BGRA32",false);
_writeEnd();

_WritePixelTypeStruct("ARGB32"); 
_WriteAlphaQ2("ARGB32",false);
_WriteAlphaQ4("ARGB32",false);
_writeEnd();

ClearIndent();
// --------------------------------------------------------------------------------------------------------------------- #>

    }
}