<#+
public class SpanTensorGen
{
	public SpanTensorGen(int dims, bool isReadOnly)
	{
		this.Dimensions = dims;
		this.IsReadOnly = isReadOnly;
	}

	public int Dimensions { get; }
	public bool IsReadOnly { get; }

	public SpanTensorGen PlusOne => new SpanTensorGen(Dimensions+1, IsReadOnly);
	public SpanTensorGen MinusOne => new SpanTensorGen(Dimensions+1, IsReadOnly);

	public string WriteableClassName => $"SpanTensor{Dimensions}";
	public string WriteableClassNamePlusOne => $"SpanTensor{Dimensions+1}";
	public string WriteableClassNameMinusOne => $"SpanTensor{Dimensions-1}";
	

	public string ClassName => (IsReadOnly ? "ReadOnly" : String.Empty) + WriteableClassName;
	public string ClassNamePlusOne => (IsReadOnly ? "ReadOnly" : String.Empty) + WriteableClassNamePlusOne;	
	public string ClassNameMinusOne => (IsReadOnly ? "ReadOnly" : String.Empty) + WriteableClassNameMinusOne;	
	

	public string GetDimensions(string separator, string prefix)
	{
		return String.Join(separator,Enumerable.Range(0,Dimensions).Select(idx => $"{prefix}{idx}")); 
	}


	public string Arguments => GetDimensions(", ", "int d");	

    public string NewTensorSize => $"new TensorSize{Dimensions}(" + GetDimensions(", ", "d") + ")";

	

	public IEnumerable<string> WriteReshapedMethod()	
	{		
        var length = GetDimensions(" * ", "d");
		var args = GetDimensions(", ", "d");

		var newTensor = $"new {ClassName}<T>(_Buffer, {args})";

		yield return $"public readonly {ClassName}<T> Reshaped({this.Arguments})";
		yield return "{";
		yield return $"if (_Buffer.Length != ({length})) throw new ArgumentException();";
		yield return $"return {newTensor};";
		yield return "}";
    }
}

#>