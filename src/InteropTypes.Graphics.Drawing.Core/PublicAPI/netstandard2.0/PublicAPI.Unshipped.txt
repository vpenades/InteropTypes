const InteropTypes.Graphics.Drawing.GlobalStyle.COLOR = "Color" -> string
const InteropTypes.Graphics.Drawing.GlobalStyle.NAME = "Name" -> string
InteropTypes.Graphics.Drawing.BoundingSphere
InteropTypes.Graphics.Drawing.BoundingSphere.BoundingSphere() -> void
InteropTypes.Graphics.Drawing.BoundingSphere.BoundingSphere(InteropTypes.Graphics.Drawing.Point3 center, float radius) -> void
InteropTypes.Graphics.Drawing.BoundingSphere.BoundingSphere(System.Numerics.Vector3 center, float radius) -> void
InteropTypes.Graphics.Drawing.BoundingSphere.Center -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.BoundingSphere.CompareTo(InteropTypes.Graphics.Drawing.BoundingSphere other) -> int
InteropTypes.Graphics.Drawing.BoundingSphere.CompareTo(System.Numerics.Plane other) -> int
InteropTypes.Graphics.Drawing.BoundingSphere.DrawTo(InteropTypes.Graphics.Drawing.IScene3D context) -> void
InteropTypes.Graphics.Drawing.BoundingSphere.DrawTo(InteropTypes.Graphics.Drawing.IScene3D context, InteropTypes.Graphics.Drawing.OutlineFillStyle color) -> void
InteropTypes.Graphics.Drawing.BoundingSphere.Equals(InteropTypes.Graphics.Drawing.BoundingSphere other) -> bool
InteropTypes.Graphics.Drawing.BoundingSphere.ISource
InteropTypes.Graphics.Drawing.BoundingSphere.ISource.GetBoundingSphere() -> InteropTypes.Graphics.Drawing.BoundingSphere
InteropTypes.Graphics.Drawing.BoundingSphere.IsValid.get -> bool
InteropTypes.Graphics.Drawing.BoundingSphere.Radius -> float
InteropTypes.Graphics.Drawing.BoundingSphere.ToString(string format, System.IFormatProvider formatProvider) -> string
InteropTypes.Graphics.Drawing.CameraTransform2D
InteropTypes.Graphics.Drawing.CameraTransform2D.CameraTransform2D() -> void
InteropTypes.Graphics.Drawing.CameraTransform2D.CreateFinalMatrix(InteropTypes.Graphics.Drawing.Point2 physicalSize) -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform2D.CreateViewMatrix() -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform2D.CreateViewportMatrix(InteropTypes.Graphics.Drawing.Point2 physicalSize) -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform2D.Equals(InteropTypes.Graphics.Drawing.CameraTransform2D other) -> bool
InteropTypes.Graphics.Drawing.CameraTransform2D.GetOuterBoundingRect() -> System.Drawing.RectangleF
InteropTypes.Graphics.Drawing.CameraTransform2D.IsInitialized.get -> bool
InteropTypes.Graphics.Drawing.CameraTransform2D.ISource
InteropTypes.Graphics.Drawing.CameraTransform2D.ISource.GetCameraTransform2D() -> InteropTypes.Graphics.Drawing.CameraTransform2D
InteropTypes.Graphics.Drawing.CameraTransform2D.IsValid.get -> bool
InteropTypes.Graphics.Drawing.CameraTransform2D.KeepAspectRatio -> bool?
InteropTypes.Graphics.Drawing.CameraTransform2D.TryCreateFinalMatrix(InteropTypes.Graphics.Drawing.ICoreCanvas2D dc, out System.Numerics.Matrix3x2 finalMatrix) -> bool
InteropTypes.Graphics.Drawing.CameraTransform2D.VirtualSize -> System.Numerics.Vector2?
InteropTypes.Graphics.Drawing.CameraTransform2D.WorldMatrix -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform3D
InteropTypes.Graphics.Drawing.CameraTransform3D.AxisMatrix -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.CameraTransform3D.CameraTransform3D() -> void
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateCameraMatrix() -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateProjectionMatrix(float aspectRatio) -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateProjectionMatrix(InteropTypes.Graphics.Drawing.Point2 screenSize) -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateViewMatrix() -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateViewportMatrix(float width, float height) -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform3D.CreateViewportMatrix(InteropTypes.Graphics.Drawing.Point2 screenSize) -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.CameraTransform3D.DrawCameraTo(InteropTypes.Graphics.Drawing.IScene3D dc, float cameraSize) -> void
InteropTypes.Graphics.Drawing.CameraTransform3D.DrawFustrumTo((InteropTypes.Graphics.Drawing.IScene3D Context, float AspectRatio) target, float lineDiameter, InteropTypes.Graphics.Drawing.ColorStyle brush) -> void
InteropTypes.Graphics.Drawing.CameraTransform3D.DrawFustrumTo(InteropTypes.Graphics.Drawing.IScene3D dc, float lineDiameter, InteropTypes.Graphics.Drawing.ColorStyle brush) -> void
InteropTypes.Graphics.Drawing.CameraTransform3D.Equals(InteropTypes.Graphics.Drawing.CameraTransform3D other) -> bool
InteropTypes.Graphics.Drawing.CameraTransform3D.IsInitialized.get -> bool
InteropTypes.Graphics.Drawing.CameraTransform3D.ISource
InteropTypes.Graphics.Drawing.CameraTransform3D.ISource.GetCameraTransform3D() -> InteropTypes.Graphics.Drawing.CameraTransform3D
InteropTypes.Graphics.Drawing.CameraTransform3D.IsValid.get -> bool
InteropTypes.Graphics.Drawing.CameraTransform3D.SetOrbitWorldMatrix(InteropTypes.Graphics.Drawing.Point3 target, float distanceToTarget, float yaw, float pitch, float roll) -> void
InteropTypes.Graphics.Drawing.CameraTransform3D.TryGetOrthographicScale(out float scale) -> bool
InteropTypes.Graphics.Drawing.CameraTransform3D.TryGetPerspectiveFieldOfView(out float verticalFOV) -> bool
InteropTypes.Graphics.Drawing.CameraTransform3D.WithAxisMatrix(in System.Numerics.Matrix4x4 axisMatrix) -> InteropTypes.Graphics.Drawing.CameraTransform3D
InteropTypes.Graphics.Drawing.CameraTransform3D.WithPlanes(float nearPlane, float farPlane) -> InteropTypes.Graphics.Drawing.CameraTransform3D
InteropTypes.Graphics.Drawing.CameraTransform3D.WithWorldMatrix(in System.Numerics.Matrix4x4 worldMatrix) -> InteropTypes.Graphics.Drawing.CameraTransform3D
InteropTypes.Graphics.Drawing.CameraTransform3D.WorldMatrix -> System.Numerics.Matrix4x4
InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle() -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(int color) -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(int red, int green, int blue) -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(int red, int green, int blue, int alpha) -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(System.Drawing.Color fillColor) -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(System.Random rnd, int? alpha) -> void
InteropTypes.Graphics.Drawing.ColorStyle.ColorStyle(uint color) -> void
InteropTypes.Graphics.Drawing.ColorStyle.Equals(InteropTypes.Graphics.Drawing.ColorStyle other) -> bool
InteropTypes.Graphics.Drawing.ColorStyle.IsEmpty.get -> bool
InteropTypes.Graphics.Drawing.ColorStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.ColorStyle.Opaque.get -> InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.ColorStyle.ToGDI() -> System.Drawing.Color
InteropTypes.Graphics.Drawing.ColorStyle.ToString(string format, System.IFormatProvider formatProvider) -> string
InteropTypes.Graphics.Drawing.ColorStyle.TrySetDefaultTo(object target) -> bool
InteropTypes.Graphics.Drawing.ColorStyle.WithOpacity(float opacity) -> InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.GlobalStyle
InteropTypes.Graphics.Drawing.GlobalStyle.Clone() -> InteropTypes.Graphics.Drawing.GlobalStyle
InteropTypes.Graphics.Drawing.GlobalStyle.GlobalStyle() -> void
InteropTypes.Graphics.Drawing.GlobalStyle.ISource
InteropTypes.Graphics.Drawing.GlobalStyle.ISource.TryGetGlobalProperty<T>(string name, out T value) -> bool
InteropTypes.Graphics.Drawing.GlobalStyle.ISource.TrySetGlobalProperty<T>(string name, T value) -> bool
InteropTypes.Graphics.Drawing.ICanvas2D
InteropTypes.Graphics.Drawing.ICanvas2D.DrawAsset(in System.Numerics.Matrix3x2 transform, object asset) -> void
InteropTypes.Graphics.Drawing.ICanvas2D.DrawEllipse(InteropTypes.Graphics.Drawing.Point2 center, float width, float height, InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> void
InteropTypes.Graphics.Drawing.ICanvas2D.DrawLines(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points, float diameter, InteropTypes.Graphics.Drawing.LineStyle style) -> void
InteropTypes.Graphics.Drawing.ICanvas2D.DrawPolygon(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points, InteropTypes.Graphics.Drawing.PolygonStyle style) -> void
InteropTypes.Graphics.Drawing.ICoreCanvas2D
InteropTypes.Graphics.Drawing.ICoreCanvas2D.DrawConvexPolygon(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points, InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> void
InteropTypes.Graphics.Drawing.ICoreCanvas2D.DrawImage(in System.Numerics.Matrix3x2 transform, InteropTypes.Graphics.Drawing.ImageStyle style) -> void
InteropTypes.Graphics.Drawing.ICoreScene3D
InteropTypes.Graphics.Drawing.ICoreScene3D.DrawConvexSurface(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> vertices, InteropTypes.Graphics.Drawing.ColorStyle style) -> void
InteropTypes.Graphics.Drawing.IDisposableCanvas2D
InteropTypes.Graphics.Drawing.IDisposableScene3D
InteropTypes.Graphics.Drawing.IDrawingBrush<TContext>
InteropTypes.Graphics.Drawing.IDrawingBrush<TContext>.DrawTo(TContext context) -> void
InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.Clone() -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.CopyTo(InteropTypes.Graphics.Drawing.ImageSource other) -> void
InteropTypes.Graphics.Drawing.ImageSource.CopyTo(InteropTypes.Graphics.Drawing.ImageSource other, InteropTypes.Graphics.Drawing.Point2 pivotOffset) -> void
InteropTypes.Graphics.Drawing.ImageSource.GetSourceRectangle() -> System.Drawing.RectangleF
InteropTypes.Graphics.Drawing.ImageSource.ImageSource() -> void
InteropTypes.Graphics.Drawing.ImageSource.ImageSource(object source, InteropTypes.Graphics.Drawing.Point2 origin, InteropTypes.Graphics.Drawing.Point2 size, InteropTypes.Graphics.Drawing.Point2 pivot, bool pivotPrecedence = false, bool mirrorX = false, bool mirrorY = false) -> void
InteropTypes.Graphics.Drawing.ImageSource.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.ImageSource.Source.get -> object
InteropTypes.Graphics.Drawing.ImageSource.WithExpandedSource(float expand) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithMirror(bool mirrorX, bool mirrorY) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithPivot(InteropTypes.Graphics.Drawing.Point2 pivot) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithPivotPrecedence(bool precedence) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithScale(float scale) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithSource(object source, int width, int height) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageSource.WithSourceSize(int width, int height) -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageStyle
InteropTypes.Graphics.Drawing.ImageStyle.Color -> InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.ImageStyle.Equals(InteropTypes.Graphics.Drawing.ImageStyle other) -> bool
InteropTypes.Graphics.Drawing.ImageStyle.Flags.get -> int
InteropTypes.Graphics.Drawing.ImageStyle.FlipHorizontal.get -> bool
InteropTypes.Graphics.Drawing.ImageStyle.FlipHorizontal.set -> void
InteropTypes.Graphics.Drawing.ImageStyle.FlipVertical.get -> bool
InteropTypes.Graphics.Drawing.ImageStyle.FlipVertical.set -> void
InteropTypes.Graphics.Drawing.ImageStyle.GetTransform() -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.ImageStyle.GetTransform(bool mirrorX, bool mirrorY) -> System.Numerics.Matrix3x2
InteropTypes.Graphics.Drawing.ImageStyle.Image -> InteropTypes.Graphics.Drawing.ImageSource
InteropTypes.Graphics.Drawing.ImageStyle.ImageStyle() -> void
InteropTypes.Graphics.Drawing.ImageStyle.ImageStyle(InteropTypes.Graphics.Drawing.ImageSource bitmap, InteropTypes.Graphics.Drawing.ColorStyle color, bool flipHorizontal, bool flipVertical) -> void
InteropTypes.Graphics.Drawing.ImageStyle.ImageStyle(InteropTypes.Graphics.Drawing.ImageSource bitmap, InteropTypes.Graphics.Drawing.ColorStyle color, int flags) -> void
InteropTypes.Graphics.Drawing.ImageStyle.IsEmpty.get -> bool
InteropTypes.Graphics.Drawing.ImageStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.ImageStyle.TransformVertices(System.Span<InteropTypes.Graphics.Drawing.Vertex2> vertices, System.Numerics.Matrix3x2 xform) -> void
InteropTypes.Graphics.Drawing.ImageStyle.TransformVertices(System.Span<InteropTypes.Graphics.Drawing.Vertex3> vertices, System.Numerics.Matrix3x2 xform, float depthZ = 1) -> void
InteropTypes.Graphics.Drawing.ImageStyle.TransformVertices(System.Span<System.Numerics.Vector2> vertices, System.Numerics.Matrix3x2 xform) -> void
InteropTypes.Graphics.Drawing.IMeshCanvas2D
InteropTypes.Graphics.Drawing.IMeshCanvas2D.DrawMeshPrimitive(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Vertex2> vertices, System.ReadOnlySpan<int> triangleIndices, object texture) -> void
InteropTypes.Graphics.Drawing.IMeshScene3D
InteropTypes.Graphics.Drawing.IMeshScene3D.DrawMeshPrimitive(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Vertex3> vertices, System.ReadOnlySpan<int> triangleIndices, object texture) -> void
InteropTypes.Graphics.Drawing.IMeshScene3D.DrawWireframePrimitive(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Vertex3> vertices, System.ReadOnlySpan<int> lineIndices) -> void
InteropTypes.Graphics.Drawing.IPseudoImmutable
InteropTypes.Graphics.Drawing.IPseudoImmutable.ImmutableKey.get -> object
InteropTypes.Graphics.Drawing.IRenderTargetInfo
InteropTypes.Graphics.Drawing.IRenderTargetInfo.DotsPerInchX.get -> float
InteropTypes.Graphics.Drawing.IRenderTargetInfo.DotsPerInchY.get -> float
InteropTypes.Graphics.Drawing.IRenderTargetInfo.PixelsHeight.get -> int
InteropTypes.Graphics.Drawing.IRenderTargetInfo.PixelsWidth.get -> int
InteropTypes.Graphics.Drawing.IScene3D
InteropTypes.Graphics.Drawing.IScene3D.DrawAsset(in System.Numerics.Matrix4x4 transform, object asset) -> void
InteropTypes.Graphics.Drawing.IScene3D.DrawSegments(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> vertices, float diameter, InteropTypes.Graphics.Drawing.LineStyle style) -> void
InteropTypes.Graphics.Drawing.IScene3D.DrawSphere(InteropTypes.Graphics.Drawing.Point3 center, float diameter, InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> void
InteropTypes.Graphics.Drawing.IScene3D.DrawSurface(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> vertices, InteropTypes.Graphics.Drawing.SurfaceStyle style) -> void
InteropTypes.Graphics.Drawing.ITransformer2D
InteropTypes.Graphics.Drawing.ITransformer2D.TransformForward(System.Span<InteropTypes.Graphics.Drawing.Point2> points) -> void
InteropTypes.Graphics.Drawing.ITransformer2D.TransformInverse(System.Span<InteropTypes.Graphics.Drawing.Point2> points) -> void
InteropTypes.Graphics.Drawing.ITransformer2D.TransformNormalsForward(System.Span<InteropTypes.Graphics.Drawing.Point2> vectors) -> void
InteropTypes.Graphics.Drawing.ITransformer2D.TransformNormalsInverse(System.Span<InteropTypes.Graphics.Drawing.Point2> vectors) -> void
InteropTypes.Graphics.Drawing.ITransformer2D.TransformScalarsForward(System.Span<float> scalars) -> void
InteropTypes.Graphics.Drawing.ITransformer2D.TransformScalarsInverse(System.Span<float> scalars) -> void
InteropTypes.Graphics.Drawing.ITransformer3D
InteropTypes.Graphics.Drawing.ITransformer3D.TransformForward(System.Span<InteropTypes.Graphics.Drawing.Point3> points) -> void
InteropTypes.Graphics.Drawing.ITransformer3D.TransformInverse(System.Span<InteropTypes.Graphics.Drawing.Point3> points) -> void
InteropTypes.Graphics.Drawing.ITransformer3D.TransformNormalsForward(System.Span<InteropTypes.Graphics.Drawing.Point3> vectors) -> void
InteropTypes.Graphics.Drawing.ITransformer3D.TransformNormalsInverse(System.Span<InteropTypes.Graphics.Drawing.Point3> vectors) -> void
InteropTypes.Graphics.Drawing.ITransformer3D.TransformScalarsForward(System.Span<float> scalars) -> void
InteropTypes.Graphics.Drawing.ITransformer3D.TransformScalarsInverse(System.Span<float> scalars) -> void
InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineCapStyle.Flat = 1 -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineCapStyle.None = 0 -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineCapStyle.Round = 3 -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineCapStyle.Square = 2 -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineCapStyle.Triangle = 4 -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.EndCap.get -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineStyle.Equals(InteropTypes.Graphics.Drawing.LineStyle other) -> bool
InteropTypes.Graphics.Drawing.LineStyle.FillColor.get -> InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.LineStyle.IsEmpty.get -> bool
InteropTypes.Graphics.Drawing.LineStyle.IsSolid(ref float diameter, out InteropTypes.Graphics.Drawing.ColorStyle solidColor) -> bool
InteropTypes.Graphics.Drawing.LineStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.LineStyle.LineStyle() -> void
InteropTypes.Graphics.Drawing.LineStyle.LineStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> void
InteropTypes.Graphics.Drawing.LineStyle.LineStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.LineStyle.LineStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.LineCapStyle startCap, InteropTypes.Graphics.Drawing.LineCapStyle endCap) -> void
InteropTypes.Graphics.Drawing.LineStyle.LineStyle(InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.LineStyle.LineStyle(InteropTypes.Graphics.Drawing.OutlineFillStyle color, InteropTypes.Graphics.Drawing.LineCapStyle startCap, InteropTypes.Graphics.Drawing.LineCapStyle endCap) -> void
InteropTypes.Graphics.Drawing.LineStyle.OutlineColor.get -> InteropTypes.Graphics.Drawing.ColorStyle
InteropTypes.Graphics.Drawing.LineStyle.OutlineWidth.get -> float
InteropTypes.Graphics.Drawing.LineStyle.StartCap.get -> InteropTypes.Graphics.Drawing.LineCapStyle
InteropTypes.Graphics.Drawing.LineStyle.With(InteropTypes.Graphics.Drawing.LineCapStyle caps) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.With(InteropTypes.Graphics.Drawing.LineCapStyle startCap, InteropTypes.Graphics.Drawing.LineCapStyle endCap) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.With(InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.WithFill(InteropTypes.Graphics.Drawing.ColorStyle color) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.WithOutline(float ow) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.LineStyle.WithOutline(InteropTypes.Graphics.Drawing.ColorStyle color, float ow) -> InteropTypes.Graphics.Drawing.LineStyle
InteropTypes.Graphics.Drawing.OutlineFillStyle
InteropTypes.Graphics.Drawing.OutlineFillStyle.Equals(InteropTypes.Graphics.Drawing.OutlineFillStyle other) -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.HasFill.get -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.HasOutline.get -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.IsEmpty.get -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.IsSolid(ref float diameter, out InteropTypes.Graphics.Drawing.ColorStyle solidColor) -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineFillStyle() -> void
InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineFillStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> void
InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineFillStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineFillStyle(InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.OutlineFillStyle.WithFill(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
InteropTypes.Graphics.Drawing.OutlineFillStyle.WithOutline(float ow) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
InteropTypes.Graphics.Drawing.OutlineFillStyle.WithOutline(InteropTypes.Graphics.Drawing.ColorStyle outlineColor) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
InteropTypes.Graphics.Drawing.OutlineFillStyle.WithOutline(InteropTypes.Graphics.Drawing.ColorStyle outlineColor, float ow) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
InteropTypes.Graphics.Drawing.Point2
InteropTypes.Graphics.Drawing.Point2.CopyTo(System.Span<float> dst) -> void
InteropTypes.Graphics.Drawing.Point2.CopyTo(System.Span<InteropTypes.Graphics.Drawing.Point2> dst) -> void
InteropTypes.Graphics.Drawing.Point2.CopyTo(System.Span<System.Numerics.Vector2> dst) -> void
InteropTypes.Graphics.Drawing.Point2.DominantAxis.get -> int
InteropTypes.Graphics.Drawing.Point2.Equals(InteropTypes.Graphics.Drawing.Point2 other) -> bool
InteropTypes.Graphics.Drawing.Point2.Equals(System.Drawing.PointF other) -> bool
InteropTypes.Graphics.Drawing.Point2.Equals(System.Drawing.SizeF other) -> bool
InteropTypes.Graphics.Drawing.Point2.Equals(System.Numerics.Vector2 other) -> bool
InteropTypes.Graphics.Drawing.Point2.GetClosestSegmentPoint(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point2.GetEnumerator() -> System.Collections.Generic.IEnumerator<float>
InteropTypes.Graphics.Drawing.Point2.Length.get -> float
InteropTypes.Graphics.Drawing.Point2.Normalized() -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point2.Normalized(out float length) -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point2.Point2() -> void
InteropTypes.Graphics.Drawing.Point2.Point2(double x, double y) -> void
InteropTypes.Graphics.Drawing.Point2.Point2(float x, float y) -> void
InteropTypes.Graphics.Drawing.Point2.Point2(System.Numerics.Vector2 vector) -> void
InteropTypes.Graphics.Drawing.Point2.Point2(System.Random rnd) -> void
InteropTypes.Graphics.Drawing.Point2.Point2(System.ReadOnlySpan<float> span) -> void
InteropTypes.Graphics.Drawing.Point2.ToArray() -> float[]
InteropTypes.Graphics.Drawing.Point2.ToGDIPoint() -> System.Drawing.PointF
InteropTypes.Graphics.Drawing.Point2.ToGDISize() -> System.Drawing.SizeF
InteropTypes.Graphics.Drawing.Point2.ToString(string format, System.IFormatProvider formatProvider) -> string
InteropTypes.Graphics.Drawing.Point2.WithLength(float len) -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point2.X -> float
InteropTypes.Graphics.Drawing.Point2.XY -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point2.Y -> float
InteropTypes.Graphics.Drawing.Point3
InteropTypes.Graphics.Drawing.Point3.CompareTo(InteropTypes.Graphics.Drawing.BoundingSphere other) -> int
InteropTypes.Graphics.Drawing.Point3.CopyTo(System.Span<float> dst) -> void
InteropTypes.Graphics.Drawing.Point3.CopyTo(System.Span<InteropTypes.Graphics.Drawing.Point3> dst) -> void
InteropTypes.Graphics.Drawing.Point3.CopyTo(System.Span<System.Numerics.Vector3> dst) -> void
InteropTypes.Graphics.Drawing.Point3.DominantAxis.get -> int
InteropTypes.Graphics.Drawing.Point3.Equals(InteropTypes.Graphics.Drawing.Point3 other) -> bool
InteropTypes.Graphics.Drawing.Point3.Equals(System.Numerics.Vector3 other) -> bool
InteropTypes.Graphics.Drawing.Point3.GetEnumerator() -> System.Collections.Generic.IEnumerator<float>
InteropTypes.Graphics.Drawing.Point3.Length.get -> float
InteropTypes.Graphics.Drawing.Point3.Normalized() -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Point3.Normalized(out float length) -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Point3.Point3() -> void
InteropTypes.Graphics.Drawing.Point3.Point3(float x, float y, float z) -> void
InteropTypes.Graphics.Drawing.Point3.Point3(InteropTypes.Graphics.Drawing.Point2 xy, float z) -> void
InteropTypes.Graphics.Drawing.Point3.Point3(System.Numerics.Vector3 v) -> void
InteropTypes.Graphics.Drawing.Point3.Point3(System.Random rnd) -> void
InteropTypes.Graphics.Drawing.Point3.Point3(System.ReadOnlySpan<float> span) -> void
InteropTypes.Graphics.Drawing.Point3.ToArray() -> float[]
InteropTypes.Graphics.Drawing.Point3.ToString(string format, System.IFormatProvider formatProvider) -> string
InteropTypes.Graphics.Drawing.Point3.WithLength(float len) -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Point3.X -> float
InteropTypes.Graphics.Drawing.Point3.XY -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point3.XYZ -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Point3.XZ.get -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point3.Y -> float
InteropTypes.Graphics.Drawing.Point3.YZ -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Point3.Z -> float
InteropTypes.Graphics.Drawing.PolygonStyle
InteropTypes.Graphics.Drawing.PolygonStyle.Equals(InteropTypes.Graphics.Drawing.PolygonStyle other) -> bool
InteropTypes.Graphics.Drawing.PolygonStyle.HasFill.get -> bool
InteropTypes.Graphics.Drawing.PolygonStyle.HasOutline.get -> bool
InteropTypes.Graphics.Drawing.PolygonStyle.IsSolid(ref float diameter, out InteropTypes.Graphics.Drawing.ColorStyle solidColor) -> bool
InteropTypes.Graphics.Drawing.PolygonStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.PolygonStyle.PolygonStyle() -> void
InteropTypes.Graphics.Drawing.PolygonStyle.PolygonStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> void
InteropTypes.Graphics.Drawing.PolygonStyle.PolygonStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.PolygonStyle.PolygonStyle(InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.PolygonStyle.WithFill(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> InteropTypes.Graphics.Drawing.PolygonStyle
InteropTypes.Graphics.Drawing.PolygonStyle.WithOutline(float ow) -> InteropTypes.Graphics.Drawing.PolygonStyle
InteropTypes.Graphics.Drawing.PolygonStyle.WithOutline(InteropTypes.Graphics.Drawing.ColorStyle outlineColor) -> InteropTypes.Graphics.Drawing.PolygonStyle
InteropTypes.Graphics.Drawing.PolygonStyle.WithOutline(InteropTypes.Graphics.Drawing.ColorStyle outlineColor, float ow) -> InteropTypes.Graphics.Drawing.PolygonStyle
InteropTypes.Graphics.Drawing.Segment2
InteropTypes.Graphics.Drawing.Segment2.Direction.get -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Segment2.DirectionNormalized.get -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Segment2.DominantAxis.get -> int
InteropTypes.Graphics.Drawing.Segment2.DrawTo(InteropTypes.Graphics.Drawing.ICanvas2D context, float diameter, InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> void
InteropTypes.Graphics.Drawing.Segment2.DrawTo(InteropTypes.Graphics.Drawing.ICoreCanvas2D context) -> void
InteropTypes.Graphics.Drawing.Segment2.DrawTo(InteropTypes.Graphics.Drawing.ICoreCanvas2D context, InteropTypes.Graphics.Drawing.ColorStyle color) -> void
InteropTypes.Graphics.Drawing.Segment2.Equals(InteropTypes.Graphics.Drawing.Segment2 other) -> bool
InteropTypes.Graphics.Drawing.Segment2.HasEnd(in InteropTypes.Graphics.Drawing.Point2 point) -> bool
InteropTypes.Graphics.Drawing.Segment2.IsFinite.get -> bool
InteropTypes.Graphics.Drawing.Segment2.Length.get -> float
InteropTypes.Graphics.Drawing.Segment2.Ordinal.get -> InteropTypes.Graphics.Drawing.Segment2
InteropTypes.Graphics.Drawing.Segment2.Segment2() -> void
InteropTypes.Graphics.Drawing.Segment3
InteropTypes.Graphics.Drawing.Segment3.CompareTo(InteropTypes.Graphics.Drawing.BoundingSphere other) -> int
InteropTypes.Graphics.Drawing.Segment3.Direction.get -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Segment3.DirectionNormalized.get -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Segment3.DominantAxis.get -> int
InteropTypes.Graphics.Drawing.Segment3.DrawTo(InteropTypes.Graphics.Drawing.ICoreScene3D context) -> void
InteropTypes.Graphics.Drawing.Segment3.DrawTo(InteropTypes.Graphics.Drawing.ICoreScene3D context, InteropTypes.Graphics.Drawing.ColorStyle color) -> void
InteropTypes.Graphics.Drawing.Segment3.DrawTo(InteropTypes.Graphics.Drawing.IScene3D context, float diameter, InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> void
InteropTypes.Graphics.Drawing.Segment3.Equals(InteropTypes.Graphics.Drawing.Segment3 other) -> bool
InteropTypes.Graphics.Drawing.Segment3.HasEnd(in InteropTypes.Graphics.Drawing.Point3 point) -> bool
InteropTypes.Graphics.Drawing.Segment3.IsFinite.get -> bool
InteropTypes.Graphics.Drawing.Segment3.Length.get -> float
InteropTypes.Graphics.Drawing.Segment3.Ordinal.get -> InteropTypes.Graphics.Drawing.Segment3
InteropTypes.Graphics.Drawing.Segment3.Segment3() -> void
InteropTypes.Graphics.Drawing.SurfaceStyle
InteropTypes.Graphics.Drawing.SurfaceStyle.Equals(InteropTypes.Graphics.Drawing.SurfaceStyle other) -> bool
InteropTypes.Graphics.Drawing.SurfaceStyle.IsVisible.get -> bool
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle() -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, bool doubleSided) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.OutlineFillStyle color, bool doubleSided) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.SurfaceStyle(InteropTypes.Graphics.Drawing.PolygonStyle color, bool doubleSided) -> void
InteropTypes.Graphics.Drawing.SurfaceStyle.With(InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
InteropTypes.Graphics.Drawing.SurfaceStyle.WithOutline(float outlineWidth) -> InteropTypes.Graphics.Drawing.SurfaceStyle
InteropTypes.Graphics.Drawing.Vertex2
InteropTypes.Graphics.Drawing.Vertex2.Color -> uint
InteropTypes.Graphics.Drawing.Vertex2.Equals(InteropTypes.Graphics.Drawing.Vertex2 other) -> bool
InteropTypes.Graphics.Drawing.Vertex2.IsFinite.get -> bool
InteropTypes.Graphics.Drawing.Vertex2.Position -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Vertex2.TextureCoord -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Vertex2.Vertex2() -> void
InteropTypes.Graphics.Drawing.Vertex2.Vertex2(InteropTypes.Graphics.Drawing.Point2 p) -> void
InteropTypes.Graphics.Drawing.Vertex2.Vertex2(InteropTypes.Graphics.Drawing.Point2 p, InteropTypes.Graphics.Drawing.ColorStyle c) -> void
InteropTypes.Graphics.Drawing.Vertex2.Vertex2(InteropTypes.Graphics.Drawing.Point2 p, InteropTypes.Graphics.Drawing.ColorStyle c, InteropTypes.Graphics.Drawing.Point2 t) -> void
InteropTypes.Graphics.Drawing.Vertex2.Vertex2(InteropTypes.Graphics.Drawing.Point2 p, InteropTypes.Graphics.Drawing.Point2 t) -> void
InteropTypes.Graphics.Drawing.Vertex3
InteropTypes.Graphics.Drawing.Vertex3.Color -> uint
InteropTypes.Graphics.Drawing.Vertex3.Equals(InteropTypes.Graphics.Drawing.Vertex3 other) -> bool
InteropTypes.Graphics.Drawing.Vertex3.IsFinite.get -> bool
InteropTypes.Graphics.Drawing.Vertex3.Position -> System.Numerics.Vector3
InteropTypes.Graphics.Drawing.Vertex3.TextureCoord -> System.Numerics.Vector2
InteropTypes.Graphics.Drawing.Vertex3.Vertex3() -> void
InteropTypes.Graphics.Drawing.Vertex3.Vertex3(InteropTypes.Graphics.Drawing.Point3 p) -> void
InteropTypes.Graphics.Drawing.Vertex3.Vertex3(InteropTypes.Graphics.Drawing.Point3 p, InteropTypes.Graphics.Drawing.ColorStyle c) -> void
InteropTypes.Graphics.Drawing.Vertex3.Vertex3(InteropTypes.Graphics.Drawing.Point3 p, InteropTypes.Graphics.Drawing.ColorStyle c, InteropTypes.Graphics.Drawing.Point2 t) -> void
InteropTypes.Graphics.Drawing.Vertex3.Vertex3(InteropTypes.Graphics.Drawing.Point3 p, InteropTypes.Graphics.Drawing.Point3 t) -> void
override InteropTypes.Graphics.Drawing.BoundingSphere.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.BoundingSphere.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.BoundingSphere.ToString() -> string
override InteropTypes.Graphics.Drawing.CameraTransform2D.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.CameraTransform2D.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.CameraTransform3D.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.CameraTransform3D.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.ColorStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.ColorStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.ColorStyle.ToString() -> string
override InteropTypes.Graphics.Drawing.ImageStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.ImageStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.LineStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.LineStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.OutlineFillStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.OutlineFillStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Point2.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Point2.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Point2.ToString() -> string
override InteropTypes.Graphics.Drawing.Point3.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Point3.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Point3.ToString() -> string
override InteropTypes.Graphics.Drawing.PolygonStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.PolygonStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Segment2.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Segment2.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Segment3.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Segment3.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.SurfaceStyle.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.SurfaceStyle.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Vertex2.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Vertex2.GetHashCode() -> int
override InteropTypes.Graphics.Drawing.Vertex3.Equals(object obj) -> bool
override InteropTypes.Graphics.Drawing.Vertex3.GetHashCode() -> int
readonly InteropTypes.Graphics.Drawing.ColorStyle.A -> byte
readonly InteropTypes.Graphics.Drawing.ColorStyle.B -> byte
readonly InteropTypes.Graphics.Drawing.ColorStyle.G -> byte
readonly InteropTypes.Graphics.Drawing.ColorStyle.Packed -> uint
readonly InteropTypes.Graphics.Drawing.ColorStyle.R -> byte
readonly InteropTypes.Graphics.Drawing.LineStyle.Style -> InteropTypes.Graphics.Drawing.OutlineFillStyle
readonly InteropTypes.Graphics.Drawing.OutlineFillStyle.FillColor -> InteropTypes.Graphics.Drawing.ColorStyle
readonly InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineColor -> InteropTypes.Graphics.Drawing.ColorStyle
readonly InteropTypes.Graphics.Drawing.OutlineFillStyle.OutlineWidth -> float
readonly InteropTypes.Graphics.Drawing.PolygonStyle.FillColor -> InteropTypes.Graphics.Drawing.ColorStyle
readonly InteropTypes.Graphics.Drawing.PolygonStyle.OutlineColor -> InteropTypes.Graphics.Drawing.ColorStyle
readonly InteropTypes.Graphics.Drawing.PolygonStyle.OutlineWidth -> float
readonly InteropTypes.Graphics.Drawing.Segment2.A -> System.Numerics.Vector2
readonly InteropTypes.Graphics.Drawing.Segment2.B -> System.Numerics.Vector2
readonly InteropTypes.Graphics.Drawing.Segment3.A -> System.Numerics.Vector3
readonly InteropTypes.Graphics.Drawing.Segment3.B -> System.Numerics.Vector3
readonly InteropTypes.Graphics.Drawing.SurfaceStyle.DoubleSided -> bool
readonly InteropTypes.Graphics.Drawing.SurfaceStyle.SmoothingGroups -> uint
readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Style -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.BoundingSphere.From(InteropTypes.Graphics.Drawing.IDrawingBrush<InteropTypes.Graphics.Drawing.ICoreScene3D> drawable) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.From(InteropTypes.Graphics.Drawing.IDrawingBrush<InteropTypes.Graphics.Drawing.IScene3D> drawable) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.FromAsset(object asset) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.FromPoints(System.Collections.Generic.IEnumerable<InteropTypes.Graphics.Drawing.Point3> points) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.implicit operator InteropTypes.Graphics.Drawing.BoundingSphere((InteropTypes.Graphics.Drawing.Point3 Center, float Radius) sphere) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.Lerp(InteropTypes.Graphics.Drawing.BoundingSphere left, InteropTypes.Graphics.Drawing.BoundingSphere right, float amount) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.Merge(in InteropTypes.Graphics.Drawing.BoundingSphere left, in InteropTypes.Graphics.Drawing.BoundingSphere right) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.Merge(in InteropTypes.Graphics.Drawing.BoundingSphere sphere, in System.Numerics.Vector3 point) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.operator !=(InteropTypes.Graphics.Drawing.BoundingSphere left, InteropTypes.Graphics.Drawing.BoundingSphere right) -> bool
static InteropTypes.Graphics.Drawing.BoundingSphere.operator ==(InteropTypes.Graphics.Drawing.BoundingSphere left, InteropTypes.Graphics.Drawing.BoundingSphere right) -> bool
static InteropTypes.Graphics.Drawing.BoundingSphere.Overlap(in InteropTypes.Graphics.Drawing.BoundingSphere left, in InteropTypes.Graphics.Drawing.BoundingSphere right) -> bool
static InteropTypes.Graphics.Drawing.BoundingSphere.Transform(InteropTypes.Graphics.Drawing.BoundingSphere sphere, in System.Numerics.Matrix4x4 transform) -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.BoundingSphere.Undefined.get -> InteropTypes.Graphics.Drawing.BoundingSphere
static InteropTypes.Graphics.Drawing.CameraTransform2D.Create(System.Numerics.Matrix3x2 worldMatrix) -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Create(System.Numerics.Matrix3x2 worldMatrix, InteropTypes.Graphics.Drawing.Point2 virtualSize) -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Create(System.Numerics.Matrix3x2 worldMatrix, InteropTypes.Graphics.Drawing.Point2 virtualSize, bool keepAspectRatio) -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Empty.get -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Identity.get -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Multiply(in System.Numerics.Matrix3x2 xform, InteropTypes.Graphics.Drawing.CameraTransform2D camera) -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.Multiply(InteropTypes.Graphics.Drawing.CameraTransform2D camera, in System.Numerics.Matrix3x2 xform) -> InteropTypes.Graphics.Drawing.CameraTransform2D
static InteropTypes.Graphics.Drawing.CameraTransform2D.operator !=(in InteropTypes.Graphics.Drawing.CameraTransform2D a, in InteropTypes.Graphics.Drawing.CameraTransform2D b) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform2D.operator ==(in InteropTypes.Graphics.Drawing.CameraTransform2D a, in InteropTypes.Graphics.Drawing.CameraTransform2D b) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform2D.TryGetFromServiceProvider(object obj, out InteropTypes.Graphics.Drawing.CameraTransform2D cameraTransform) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform2D.TryGetOuterCamera(InteropTypes.Graphics.Drawing.ICoreCanvas2D dc, out InteropTypes.Graphics.Drawing.CameraTransform2D camera) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform2D.TryGetRenderTargetInfo(InteropTypes.Graphics.Drawing.ICoreCanvas2D dc, out InteropTypes.Graphics.Drawing.IRenderTargetInfo rtinfo) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform3D.CreateOrthographic(float scale) -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.CreatePerspective(float fov) -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.Empty.get -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.Identity.get -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.Multiply(in System.Numerics.Matrix4x4 xform, InteropTypes.Graphics.Drawing.CameraTransform3D camera) -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.Multiply(InteropTypes.Graphics.Drawing.CameraTransform3D camera, in System.Numerics.Matrix4x4 xform) -> InteropTypes.Graphics.Drawing.CameraTransform3D
static InteropTypes.Graphics.Drawing.CameraTransform3D.operator !=(in InteropTypes.Graphics.Drawing.CameraTransform3D a, in InteropTypes.Graphics.Drawing.CameraTransform3D b) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform3D.operator ==(in InteropTypes.Graphics.Drawing.CameraTransform3D a, in InteropTypes.Graphics.Drawing.CameraTransform3D b) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform3D.TryGetFromServiceProvider(object obj, out InteropTypes.Graphics.Drawing.CameraTransform3D cameraTransform) -> bool
static InteropTypes.Graphics.Drawing.CameraTransform3D.ZUpAxisMatrix.get -> System.Numerics.Matrix4x4
static InteropTypes.Graphics.Drawing.ColorStyle.AreEqual(uint colorA, uint colorB) -> bool
static InteropTypes.Graphics.Drawing.ColorStyle.FromOpacity(float opacity) -> InteropTypes.Graphics.Drawing.ColorStyle
static InteropTypes.Graphics.Drawing.ColorStyle.GetDefaultFrom(object source, InteropTypes.Graphics.Drawing.ColorStyle defval) -> InteropTypes.Graphics.Drawing.ColorStyle
static InteropTypes.Graphics.Drawing.ColorStyle.implicit operator InteropTypes.Graphics.Drawing.ColorStyle(System.Drawing.Color fillColor) -> InteropTypes.Graphics.Drawing.ColorStyle
static InteropTypes.Graphics.Drawing.ColorStyle.operator !=(InteropTypes.Graphics.Drawing.ColorStyle a, InteropTypes.Graphics.Drawing.ColorStyle b) -> bool
static InteropTypes.Graphics.Drawing.ColorStyle.operator ==(InteropTypes.Graphics.Drawing.ColorStyle a, InteropTypes.Graphics.Drawing.ColorStyle b) -> bool
static InteropTypes.Graphics.Drawing.ColorStyle.TryGetDefaultFrom(object source) -> InteropTypes.Graphics.Drawing.ColorStyle
static InteropTypes.Graphics.Drawing.GlobalStyle.TryGetGlobalProperty<T>(object obj, string name, out T value) -> bool
static InteropTypes.Graphics.Drawing.GlobalStyle.TrySetGlobalProperty<T>(object obj, string name, T value) -> bool
static InteropTypes.Graphics.Drawing.GlobalStyle.TrySetGlobalProperty<T>(ref InteropTypes.Graphics.Drawing.GlobalStyle style, string name, T value) -> bool
static InteropTypes.Graphics.Drawing.ImageSource.Create(object source, InteropTypes.Graphics.Drawing.Point2 origin, InteropTypes.Graphics.Drawing.Point2 size, InteropTypes.Graphics.Drawing.Point2 pivot, bool pivotPrecedence = false, bool mirrorX = false, bool mirrorY = false) -> InteropTypes.Graphics.Drawing.ImageSource
static InteropTypes.Graphics.Drawing.ImageSource.CreateFromBitmap(object source, InteropTypes.Graphics.Drawing.Point2 bitmapSize, InteropTypes.Graphics.Drawing.Point2 pivot, bool pivotPrecedence = false) -> InteropTypes.Graphics.Drawing.ImageSource
static InteropTypes.Graphics.Drawing.ImageSource.CreateGrid(object source, int tileCount, int tileStride, InteropTypes.Graphics.Drawing.Point2 tileSize, InteropTypes.Graphics.Drawing.Point2 tilePivot, bool pivotPrecedence = false) -> System.Collections.Generic.IEnumerable<InteropTypes.Graphics.Drawing.ImageSource>
static InteropTypes.Graphics.Drawing.ImageStyle.implicit operator InteropTypes.Graphics.Drawing.ImageStyle((InteropTypes.Graphics.Drawing.ImageSource asset, bool, bool) tuple) -> InteropTypes.Graphics.Drawing.ImageStyle
static InteropTypes.Graphics.Drawing.ImageStyle.implicit operator InteropTypes.Graphics.Drawing.ImageStyle((InteropTypes.Graphics.Drawing.ImageSource asset, InteropTypes.Graphics.Drawing.ColorStyle color) args) -> InteropTypes.Graphics.Drawing.ImageStyle
static InteropTypes.Graphics.Drawing.ImageStyle.implicit operator InteropTypes.Graphics.Drawing.ImageStyle((InteropTypes.Graphics.Drawing.ImageSource asset, InteropTypes.Graphics.Drawing.ColorStyle color, bool, bool) tuple) -> InteropTypes.Graphics.Drawing.ImageStyle
static InteropTypes.Graphics.Drawing.ImageStyle.implicit operator InteropTypes.Graphics.Drawing.ImageStyle(InteropTypes.Graphics.Drawing.ImageSource asset) -> InteropTypes.Graphics.Drawing.ImageStyle
static InteropTypes.Graphics.Drawing.ImageStyle.operator !=(InteropTypes.Graphics.Drawing.ImageStyle a, InteropTypes.Graphics.Drawing.ImageStyle b) -> bool
static InteropTypes.Graphics.Drawing.ImageStyle.operator ==(InteropTypes.Graphics.Drawing.ImageStyle a, InteropTypes.Graphics.Drawing.ImageStyle b) -> bool
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.ColorStyle, float, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.ColorStyle, float, InteropTypes.Graphics.Drawing.LineCapStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.LineCapStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.OutlineFillStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((InteropTypes.Graphics.Drawing.OutlineFillStyle, InteropTypes.Graphics.Drawing.LineCapStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, InteropTypes.Graphics.Drawing.LineCapStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, System.Drawing.Color, float, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle((System.Drawing.Color, System.Drawing.Color, float, InteropTypes.Graphics.Drawing.LineCapStyle, InteropTypes.Graphics.Drawing.LineCapStyle) style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle(InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.implicit operator InteropTypes.Graphics.Drawing.LineStyle(System.Drawing.Color fillColor) -> InteropTypes.Graphics.Drawing.LineStyle
static InteropTypes.Graphics.Drawing.LineStyle.operator !=(InteropTypes.Graphics.Drawing.LineStyle a, InteropTypes.Graphics.Drawing.LineStyle b) -> bool
static InteropTypes.Graphics.Drawing.LineStyle.operator ==(InteropTypes.Graphics.Drawing.LineStyle a, InteropTypes.Graphics.Drawing.LineStyle b) -> bool
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle((InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle((System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle((System.Drawing.Color, System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.implicit operator InteropTypes.Graphics.Drawing.OutlineFillStyle(System.Drawing.Color fillColor) -> InteropTypes.Graphics.Drawing.OutlineFillStyle
static InteropTypes.Graphics.Drawing.OutlineFillStyle.operator !=(InteropTypes.Graphics.Drawing.OutlineFillStyle a, InteropTypes.Graphics.Drawing.OutlineFillStyle b) -> bool
static InteropTypes.Graphics.Drawing.OutlineFillStyle.operator ==(InteropTypes.Graphics.Drawing.OutlineFillStyle a, InteropTypes.Graphics.Drawing.OutlineFillStyle b) -> bool
static InteropTypes.Graphics.Drawing.Point2.AngleInRadians(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> float
static InteropTypes.Graphics.Drawing.Point2.AreEqual(in InteropTypes.Graphics.Drawing.Point2 a, in InteropTypes.Graphics.Drawing.Point2 b) -> bool
static InteropTypes.Graphics.Drawing.Point2.AreEqual(in InteropTypes.Graphics.Drawing.Point2 a, in InteropTypes.Graphics.Drawing.Point2 b, float tolerance) -> bool
static InteropTypes.Graphics.Drawing.Point2.Array(params InteropTypes.Graphics.Drawing.Point2[] points) -> InteropTypes.Graphics.Drawing.Point2[]
static InteropTypes.Graphics.Drawing.Point2.AsNumerics(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points) -> System.ReadOnlySpan<System.Numerics.Vector2>
static InteropTypes.Graphics.Drawing.Point2.AsNumerics(System.Span<InteropTypes.Graphics.Drawing.Point2> points) -> System.Span<System.Numerics.Vector2>
static InteropTypes.Graphics.Drawing.Point2.AsPoints(System.ReadOnlySpan<System.Numerics.Vector2> points) -> System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2>
static InteropTypes.Graphics.Drawing.Point2.AsPoints(System.Span<System.Numerics.Vector2> points) -> System.Span<InteropTypes.Graphics.Drawing.Point2>
static InteropTypes.Graphics.Drawing.Point2.Center(System.Drawing.Rectangle rect) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Center(System.Drawing.RectangleF rect) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(InteropTypes.Graphics.Drawing.Point2[] points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(System.Collections.Generic.IEnumerable<InteropTypes.Graphics.Drawing.Point2> points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(System.Collections.Generic.IEnumerable<System.Numerics.Vector2> points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(System.Numerics.Vector2[] points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Centroid(System.ReadOnlySpan<System.Numerics.Vector2> points) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Cross(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> float
static InteropTypes.Graphics.Drawing.Point2.Cross(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b, InteropTypes.Graphics.Drawing.Point2 c) -> float
static InteropTypes.Graphics.Drawing.Point2.DebugAssertIsFinite(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points) -> void
static InteropTypes.Graphics.Drawing.Point2.FromRect(System.Drawing.RectangleF rect) -> InteropTypes.Graphics.Drawing.Point2[]
static InteropTypes.Graphics.Drawing.Point2.GetDominantAxis(InteropTypes.Graphics.Drawing.Point2 point) -> int
static InteropTypes.Graphics.Drawing.Point2.Half.get -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2((double X, double Y) p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2((float X, float Y) p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Drawing.Point p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Drawing.PointF p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Drawing.Size p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Drawing.SizeF p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Numerics.Vector2 p) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.implicit operator InteropTypes.Graphics.Drawing.Point2(System.Random rnd) -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.IsClosedLoop(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> points) -> bool
static InteropTypes.Graphics.Drawing.Point2.IsFinite(InteropTypes.Graphics.Drawing.Point2 point) -> bool
static InteropTypes.Graphics.Drawing.Point2.Lerp(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b, float amount) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Normalize(InteropTypes.Graphics.Drawing.Point2 value, out float length) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.One.get -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.operator !=(in InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> bool
static InteropTypes.Graphics.Drawing.Point2.operator !=(in InteropTypes.Graphics.Drawing.Point2 a, System.Numerics.Vector2 b) -> bool
static InteropTypes.Graphics.Drawing.Point2.operator *(InteropTypes.Graphics.Drawing.Point2 a, float b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator *(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator +(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator -(InteropTypes.Graphics.Drawing.Point2 a) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator -(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator /(InteropTypes.Graphics.Drawing.Point2 a, float b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator /(InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.operator ==(in InteropTypes.Graphics.Drawing.Point2 a, InteropTypes.Graphics.Drawing.Point2 b) -> bool
static InteropTypes.Graphics.Drawing.Point2.operator ==(in InteropTypes.Graphics.Drawing.Point2 a, System.Numerics.Vector2 b) -> bool
static InteropTypes.Graphics.Drawing.Point2.Transform(float x, float y, in System.Numerics.Matrix3x2 xform) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Transform(InteropTypes.Graphics.Drawing.Point2 p, in System.Numerics.Matrix3x2 xform) -> System.Numerics.Vector2
static InteropTypes.Graphics.Drawing.Point2.Transform(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> src, System.Span<InteropTypes.Graphics.Drawing.Point2> dst, in System.Numerics.Matrix3x2 xform) -> void
static InteropTypes.Graphics.Drawing.Point2.Transform(System.Span<InteropTypes.Graphics.Drawing.Point2> points, in System.Numerics.Matrix3x2 xform) -> void
static InteropTypes.Graphics.Drawing.Point2.TransformNormals(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> src, System.Span<InteropTypes.Graphics.Drawing.Point2> dst, in System.Numerics.Matrix3x2 xform) -> void
static InteropTypes.Graphics.Drawing.Point2.TransformNormals(System.Span<InteropTypes.Graphics.Drawing.Point2> points, in System.Numerics.Matrix3x2 xform) -> void
static InteropTypes.Graphics.Drawing.Point2.UnitX.get -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.UnitY.get -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point2.Zero.get -> InteropTypes.Graphics.Drawing.Point2
static InteropTypes.Graphics.Drawing.Point3.AngleInRadians(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b) -> float
static InteropTypes.Graphics.Drawing.Point3.AreEqual(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b) -> bool
static InteropTypes.Graphics.Drawing.Point3.AreEqual(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b, float tolerance) -> bool
static InteropTypes.Graphics.Drawing.Point3.Array(params InteropTypes.Graphics.Drawing.Point3[] points) -> InteropTypes.Graphics.Drawing.Point3[]
static InteropTypes.Graphics.Drawing.Point3.AsNumerics(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> points) -> System.ReadOnlySpan<System.Numerics.Vector3>
static InteropTypes.Graphics.Drawing.Point3.AsNumerics(System.Span<InteropTypes.Graphics.Drawing.Point3> points) -> System.Span<System.Numerics.Vector3>
static InteropTypes.Graphics.Drawing.Point3.AsPoints(System.ReadOnlySpan<System.Numerics.Vector3> points) -> System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3>
static InteropTypes.Graphics.Drawing.Point3.AsPoints(System.Span<System.Numerics.Vector3> points) -> System.Span<InteropTypes.Graphics.Drawing.Point3>
static InteropTypes.Graphics.Drawing.Point3.Centroid(InteropTypes.Graphics.Drawing.Point3[] points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Centroid(System.Collections.Generic.IEnumerable<InteropTypes.Graphics.Drawing.Point3> points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Centroid(System.Collections.Generic.IEnumerable<System.Numerics.Vector3> points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Centroid(System.Numerics.Vector3[] points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Centroid(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Centroid(System.ReadOnlySpan<System.Numerics.Vector3> points) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Cross(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b, InteropTypes.Graphics.Drawing.Point3 c) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.DebugAssertIsFinite(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> points) -> void
static InteropTypes.Graphics.Drawing.Point3.GetDominantAxis(InteropTypes.Graphics.Drawing.Point3 point) -> int
static InteropTypes.Graphics.Drawing.Point3.Half.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.implicit operator InteropTypes.Graphics.Drawing.Point3((float X, float Y, float Z) p) -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.implicit operator InteropTypes.Graphics.Drawing.Point3((InteropTypes.Graphics.Drawing.Point2 XY, float Z) p) -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.implicit operator InteropTypes.Graphics.Drawing.Point3(System.Numerics.Vector3 p) -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.implicit operator InteropTypes.Graphics.Drawing.Point3(System.Random rnd) -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.IsClosedLoop(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point3> points) -> bool
static InteropTypes.Graphics.Drawing.Point3.IsFinite(InteropTypes.Graphics.Drawing.Point3 point) -> bool
static InteropTypes.Graphics.Drawing.Point3.Lerp(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b, float amount) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.Normalize(InteropTypes.Graphics.Drawing.Point3 value, out float length) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.One.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.operator !=(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b) -> bool
static InteropTypes.Graphics.Drawing.Point3.operator !=(in InteropTypes.Graphics.Drawing.Point3 a, in System.Numerics.Vector3 b) -> bool
static InteropTypes.Graphics.Drawing.Point3.operator *(InteropTypes.Graphics.Drawing.Point3 a, float b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator *(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator +(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator -(InteropTypes.Graphics.Drawing.Point3 a) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator -(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator /(InteropTypes.Graphics.Drawing.Point3 a, float b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator /(InteropTypes.Graphics.Drawing.Point3 a, InteropTypes.Graphics.Drawing.Point3 b) -> System.Numerics.Vector3
static InteropTypes.Graphics.Drawing.Point3.operator ==(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b) -> bool
static InteropTypes.Graphics.Drawing.Point3.operator ==(in InteropTypes.Graphics.Drawing.Point3 a, in System.Numerics.Vector3 b) -> bool
static InteropTypes.Graphics.Drawing.Point3.Transform(InteropTypes.Graphics.Drawing.Point3 p, in System.Numerics.Matrix4x4 xform) -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.Transform(System.Span<InteropTypes.Graphics.Drawing.Point3> dst, System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Point2> src, float z) -> void
static InteropTypes.Graphics.Drawing.Point3.UnitX.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.UnitY.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.UnitZ.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.Point3.Zero.get -> InteropTypes.Graphics.Drawing.Point3
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle((InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle((InteropTypes.Graphics.Drawing.ColorStyle, InteropTypes.Graphics.Drawing.ColorStyle, float) style) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle((System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle((System.Drawing.Color, System.Drawing.Color, float) style) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle(InteropTypes.Graphics.Drawing.ColorStyle fillColor) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle(InteropTypes.Graphics.Drawing.OutlineFillStyle style) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.implicit operator InteropTypes.Graphics.Drawing.PolygonStyle(System.Drawing.Color fillColor) -> InteropTypes.Graphics.Drawing.PolygonStyle
static InteropTypes.Graphics.Drawing.PolygonStyle.operator !=(InteropTypes.Graphics.Drawing.PolygonStyle a, InteropTypes.Graphics.Drawing.PolygonStyle b) -> bool
static InteropTypes.Graphics.Drawing.PolygonStyle.operator ==(InteropTypes.Graphics.Drawing.PolygonStyle a, InteropTypes.Graphics.Drawing.PolygonStyle b) -> bool
static InteropTypes.Graphics.Drawing.Segment2.Create(in InteropTypes.Graphics.Drawing.Point2 a, in InteropTypes.Graphics.Drawing.Point2 b) -> InteropTypes.Graphics.Drawing.Segment2
static InteropTypes.Graphics.Drawing.Segment2.CreateOrdinal(in InteropTypes.Graphics.Drawing.Point2 a, in InteropTypes.Graphics.Drawing.Point2 b) -> InteropTypes.Graphics.Drawing.Segment2
static InteropTypes.Graphics.Drawing.Segment2.Distance(in InteropTypes.Graphics.Drawing.Segment2 segment, InteropTypes.Graphics.Drawing.Point2 point) -> float
static InteropTypes.Graphics.Drawing.Segment2.DotProduct(in InteropTypes.Graphics.Drawing.Segment2 segment, InteropTypes.Graphics.Drawing.Point2 point) -> float
static InteropTypes.Graphics.Drawing.Segment2.GetEqualityComparer(bool ordinal) -> System.Collections.Generic.IEqualityComparer<InteropTypes.Graphics.Drawing.Segment2>
static InteropTypes.Graphics.Drawing.Segment2.Lerp(InteropTypes.Graphics.Drawing.Segment2 a, InteropTypes.Graphics.Drawing.Segment2 b, float amount) -> InteropTypes.Graphics.Drawing.Segment2
static InteropTypes.Graphics.Drawing.Segment2.LerpOrdinal(InteropTypes.Graphics.Drawing.Segment2 a, InteropTypes.Graphics.Drawing.Segment2 b, float amount) -> InteropTypes.Graphics.Drawing.Segment2
static InteropTypes.Graphics.Drawing.Segment2.operator !=(InteropTypes.Graphics.Drawing.Segment2 left, InteropTypes.Graphics.Drawing.Segment2 right) -> bool
static InteropTypes.Graphics.Drawing.Segment2.operator ==(InteropTypes.Graphics.Drawing.Segment2 left, InteropTypes.Graphics.Drawing.Segment2 right) -> bool
static InteropTypes.Graphics.Drawing.Segment2.TryGetConnectingPoint(in InteropTypes.Graphics.Drawing.Segment2 a, in InteropTypes.Graphics.Drawing.Segment2 b, out InteropTypes.Graphics.Drawing.Point2 connectingPoint) -> bool
static InteropTypes.Graphics.Drawing.Segment3.Create(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b) -> InteropTypes.Graphics.Drawing.Segment3
static InteropTypes.Graphics.Drawing.Segment3.CreateOrdinal(in InteropTypes.Graphics.Drawing.Point3 a, in InteropTypes.Graphics.Drawing.Point3 b) -> InteropTypes.Graphics.Drawing.Segment3
static InteropTypes.Graphics.Drawing.Segment3.Distance(in InteropTypes.Graphics.Drawing.Segment3 segment, InteropTypes.Graphics.Drawing.Point3 point) -> float
static InteropTypes.Graphics.Drawing.Segment3.DotProduct(in InteropTypes.Graphics.Drawing.Segment3 segment, InteropTypes.Graphics.Drawing.Point3 point) -> float
static InteropTypes.Graphics.Drawing.Segment3.GetEqualityComparer(bool ordinal) -> System.Collections.Generic.IEqualityComparer<InteropTypes.Graphics.Drawing.Segment3>
static InteropTypes.Graphics.Drawing.Segment3.Lerp(InteropTypes.Graphics.Drawing.Segment3 a, InteropTypes.Graphics.Drawing.Segment3 b, float amount) -> InteropTypes.Graphics.Drawing.Segment3
static InteropTypes.Graphics.Drawing.Segment3.LerpOrdinal(InteropTypes.Graphics.Drawing.Segment3 a, InteropTypes.Graphics.Drawing.Segment3 b, float amount) -> InteropTypes.Graphics.Drawing.Segment3
static InteropTypes.Graphics.Drawing.Segment3.operator !=(InteropTypes.Graphics.Drawing.Segment3 left, InteropTypes.Graphics.Drawing.Segment3 right) -> bool
static InteropTypes.Graphics.Drawing.Segment3.operator ==(InteropTypes.Graphics.Drawing.Segment3 left, InteropTypes.Graphics.Drawing.Segment3 right) -> bool
static InteropTypes.Graphics.Drawing.Segment3.TryGetConnectingPoint(in InteropTypes.Graphics.Drawing.Segment3 a, in InteropTypes.Graphics.Drawing.Segment3 b, out InteropTypes.Graphics.Drawing.Point3 connectingPoint) -> bool
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.ColorStyle fillColor, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.ColorStyle fillColor, float outWidth) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.ColorStyle fillColor, InteropTypes.Graphics.Drawing.ColorStyle outColor, float outWidth, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.OutlineFillStyle color, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((InteropTypes.Graphics.Drawing.PolygonStyle color, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((System.Drawing.Color fillColor, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((System.Drawing.Color fillColor, float outWidth) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((System.Drawing.Color fillColor, System.Drawing.Color outColor, float outWidth) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle((System.Drawing.Color fillColor, System.Drawing.Color outColor, float outWidth, bool doubleSided) style) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle(InteropTypes.Graphics.Drawing.ColorStyle color) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle(InteropTypes.Graphics.Drawing.OutlineFillStyle brush) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle(InteropTypes.Graphics.Drawing.PolygonStyle brush) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.implicit operator InteropTypes.Graphics.Drawing.SurfaceStyle(System.Drawing.Color color) -> InteropTypes.Graphics.Drawing.SurfaceStyle
static InteropTypes.Graphics.Drawing.SurfaceStyle.operator !=(InteropTypes.Graphics.Drawing.SurfaceStyle a, InteropTypes.Graphics.Drawing.SurfaceStyle b) -> bool
static InteropTypes.Graphics.Drawing.SurfaceStyle.operator ==(InteropTypes.Graphics.Drawing.SurfaceStyle a, InteropTypes.Graphics.Drawing.SurfaceStyle b) -> bool
static InteropTypes.Graphics.Drawing.Vertex2.AreEqual(in InteropTypes.Graphics.Drawing.Vertex2 a, in InteropTypes.Graphics.Drawing.Vertex2 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex2.operator !=(in InteropTypes.Graphics.Drawing.Vertex2 a, in InteropTypes.Graphics.Drawing.Vertex2 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex2.operator ==(in InteropTypes.Graphics.Drawing.Vertex2 a, in InteropTypes.Graphics.Drawing.Vertex2 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex2.Transform(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Vertex2> src, in System.Numerics.Matrix3x2 transform, System.Span<InteropTypes.Graphics.Drawing.Vertex2> dst) -> void
static InteropTypes.Graphics.Drawing.Vertex2.Transform(System.Span<InteropTypes.Graphics.Drawing.Vertex2> vertices, in System.Numerics.Matrix3x2 transform) -> void
static InteropTypes.Graphics.Drawing.Vertex3.AreEqual(in InteropTypes.Graphics.Drawing.Vertex3 a, in InteropTypes.Graphics.Drawing.Vertex3 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex3.operator !=(in InteropTypes.Graphics.Drawing.Vertex3 a, in InteropTypes.Graphics.Drawing.Vertex3 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex3.operator ==(in InteropTypes.Graphics.Drawing.Vertex3 a, in InteropTypes.Graphics.Drawing.Vertex3 b) -> bool
static InteropTypes.Graphics.Drawing.Vertex3.Transform(System.ReadOnlySpan<InteropTypes.Graphics.Drawing.Vertex3> src, in System.Numerics.Matrix4x4 transform, System.Span<InteropTypes.Graphics.Drawing.Vertex3> dst) -> void
static InteropTypes.Graphics.Drawing.Vertex3.Transform(System.Span<InteropTypes.Graphics.Drawing.Vertex3> vertices, in System.Numerics.Matrix4x4 transform) -> void
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Black -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Blue -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Gray -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Green -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Red -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Transparent -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.White -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.ColorStyle.Yellow -> InteropTypes.Graphics.Drawing.ColorStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Black -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Blue -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Gray -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Green -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Red -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.White -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.LineStyle.Yellow -> InteropTypes.Graphics.Drawing.LineStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Black -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Blue -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Gray -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Green -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.Red -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_Black -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_Blue -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_Gray -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_Green -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_Red -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.TwoSides_White -> InteropTypes.Graphics.Drawing.SurfaceStyle
static readonly InteropTypes.Graphics.Drawing.SurfaceStyle.White -> InteropTypes.Graphics.Drawing.SurfaceStyle